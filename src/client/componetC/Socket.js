import { useRef } from "react";
import { Client } from "@stomp/stompjs";

export const useWebSocket = (sub, onMessageReceived) => {
  const stompClient = useRef(null);

  const connectWS = () => {
    if (stompClient.current) {
      console.warn("‚ö†Ô∏è WebSocket already connected.");
      return;
    }

    if (!sub) {
      console.error("‚ùå WebSocket Error: Subscription topic is required!");
      return;
    }

    const socket = new WebSocket("ws://localhost:8080/ws");
    stompClient.current = new Client({
      webSocketFactory: () => socket,
      reconnectDelay: 5000,
      onConnect: (frame) => {
        console.log("‚úÖ WebSocket Connected in hook:", frame);

        // ƒêƒÉng k√Ω v√†o topic t√πy ch·ªânh
        stompClient.current.subscribe(sub, (message) => {
          const newMsg = message.body;
          console.log(`üì© New Message from ${sub}:`, newMsg);

          // G·ªçi callback ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn m·ªõi
          if (onMessageReceived) {
            onMessageReceived(newMsg);
          }
        });
      },
      onStompError: (frame) =>
        console.error("‚ùå STOMP Error:", frame.headers["message"]),
      onWebSocketClose: (event) => console.warn("‚ö†Ô∏è WebSocket Closed:", event),
      debug: (str) => console.log("üõ† WebSocket Debug:", str),
    });

    stompClient.current.activate();
  };

  const disconnectWS = () => {
    if (stompClient.current) {
      stompClient.current.deactivate();
      stompClient.current = null;
      console.log("‚ùé WebSocket Disconnected");
    }
  };

  return { connectWS, disconnectWS };
};

import { useRef, useCallback } from "react";
import { Client } from "@stomp/stompjs";

export const useWebSocket = (sub, onMessageReceived) => {
  const stompClient = useRef(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 10; // Gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi l·∫°i

  // H√†m k·∫øt n·ªëi WebSocket
  const connectWS = useCallback(() => {
    if (stompClient.current && stompClient.current.connected) {
      console.warn("‚ö†Ô∏è WebSocket already connected.");
      return;
    }

    if (!sub) {
      console.error("‚ùå WebSocket Error: Subscription topic is required!");
      return;
    }

    const socket = new WebSocket("ws://localhost:8080/ws");
    stompClient.current = new Client({
      webSocketFactory: () => socket,
      reconnectDelay: 5000, // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y n·∫øu m·∫•t k·∫øt n·ªëi
      heartbeatIncoming: 4000, // G·ª≠i heartbeat t·ª´ server v·ªÅ client m·ªói 4 gi√¢y
      heartbeatOutgoing: 4000, // G·ª≠i heartbeat t·ª´ client v·ªÅ server m·ªói 4 gi√¢y
      onConnect: (frame) => {
        console.log("‚úÖ WebSocket Connected in hook:", frame);
        reconnectAttempts.current = 0; // Reset s·ªë l·∫ßn th·ª≠ khi k·∫øt n·ªëi th√†nh c√¥ng

        // ƒêƒÉng k√Ω v√†o topic
        stompClient.current.subscribe(sub, (message) => {
          const newMsg = message.body;
          console.log(`üì© New Message from ${sub}:`, newMsg);
          if (onMessageReceived) {
            onMessageReceived(newMsg);
          }
        });
      },
      onStompError: (frame) => {
        console.error("‚ùå STOMP Error:", frame.headers["message"]);
      },
      onWebSocketClose: (event) => {
        console.warn("‚ö†Ô∏è WebSocket Closed:", event);
        if (reconnectAttempts.current < maxReconnectAttempts) {
          console.log(
            `üîÑ Attempting to reconnect (${reconnectAttempts.current + 1}/${maxReconnectAttempts})...`
          );
          reconnectAttempts.current += 1;
        } else {
          console.error("‚ùå Max reconnect attempts reached. Giving up.");
        }
      },
      onWebSocketError: (error) => {
        console.error("‚ùå WebSocket Error:", error);
      },
      debug: (str) => console.log("üõ† WebSocket Debug:", str),
    });

    // K√≠ch ho·∫°t k·∫øt n·ªëi
    stompClient.current.activate();

    // Cleanup khi component unmount
    return () => {
      if (stompClient.current) {
        stompClient.current.deactivate();
      }
    };
  }, [sub, onMessageReceived]); // Dependencies ƒë·ªÉ useCallback ho·∫°t ƒë·ªông ƒë√∫ng

  // H√†m ng·∫Øt k·∫øt n·ªëi th·ªß c√¥ng
  const disconnectWS = useCallback(() => {
    if (stompClient.current) {
      stompClient.current.deactivate();
      stompClient.current = null;
      console.log("‚ùé WebSocket Disconnected");
    }
  }, []);

  // H√†m ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
  const isConnected = () => {
    return stompClient.current && stompClient.current.connected;
  };

  return { connectWS, disconnectWS, isConnected };
};
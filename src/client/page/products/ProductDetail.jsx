import {
  Button,
  Card,
  Col,
  Flex,
  Image,
  Input,
  InputNumber,
  message,
  notification,
  Radio,
  Row,
  Space,
} from "antd";
import { Content } from "antd/es/layout/layout";
import React, { useEffect, useState } from "react";
import { ShoppingCartOutlined } from "@ant-design/icons";
import { COLORS } from "../../../constants/constants";
import { FaCartPlus } from "react-icons/fa6";
import Title from "antd/es/skeleton/Title";
import PropProduct from "./PropProduct";
import {
  Link,
  Navigate,
  useNavigate,
  useParams,
  useSearchParams,
} from "react-router-dom";
import SizeChart from "./SizeChart";
import { FcBusinessman } from "react-icons/fc";
import { FcNext } from "react-icons/fc";
import {
  apiAddCart,
  apiGetColorsOfProduct,
  apigetProductDetail,
  apiGetSizesOfProduct,
  apiGetSizesOfProductAndColor,
  getAllProducthadViewsDesc,
} from "./api";
import { addToCart, clearCart, getCart } from "../cart/cart.js";
import GetProductDetail from "../../../admin/product/Product/GetProductDetail";
import { addToBill, clearBill } from "../cart/bill.js";
import { toast } from "react-toastify";
import CommentSection from "./CommentSection.jsx";
import { clearVoucher } from "../cart/voucher.js";

function ProductDetail() {
  const [searchParams] = useSearchParams(); // L·∫•y query parameters t·ª´ URL
  const { productId } = useParams();
  // const productId = searchParams.get("productId");
  const colorId = searchParams.get("colorId");
  const sizeId = searchParams.get("sizeId");
  // const products = {
  //   name: "Nike - Gi√†y th·ªùi trang th·ªÉ thao N·ªØ Air Max SC Women's Shoes",
  //   price: 50000,
  //   promotion: "gi·∫£m 20%",
  //   sale: "342",
  //   url: "https://res.cloudinary.com/dieyhvcou/image/upload/v1739012023/1-removebg-preview_m7nq8q.png",
  //   statusSale: "Best Sale",
  // };
  // const productDetail = {
  //   productName: "Gi√†y Nike Wmns Air Jordan 1 Low ‚ÄòWhite Wolf Grey‚Äô DC0774-105",
  //   image: [
  //     {
  //       url: "https://res.cloudinary.com/dieyhvcou/image/upload/v1739012023/1-removebg-preview_m7nq8q.png",
  //       publicId: "abc",
  //     },
  //     {
  //       url: "https://res.cloudinary.com/dieyhvcou/image/upload/v1739012023/1-removebg-preview_m7nq8q.png",
  //       publicId: "abc",
  //     },
  //     {
  //       url: "https://res.cloudinary.com/dieyhvcou/image/upload/v1739012023/1-removebg-preview_m7nq8q.png",
  //       publicId: "abc",
  //     },
  //     {
  //       url: "https://res.cloudinary.com/dieyhvcou/image/upload/v1739012023/1-removebg-preview_m7nq8q.png",
  //       publicId: "abc",
  //     },
  //     {
  //       url: "https://res.cloudinary.com/dieyhvcou/image/upload/v1739012023/1-removebg-preview_m7nq8q.png",
  //       publicId: "abc",
  //     },
  //   ],
  //   price: 200000,
  //   quantity: 12,
  //   colorName: "xanh",
  //   brandName: "Nike",
  //   sizeName: "20",
  //   materialName: "lether",
  //   typeName: "Nam",
  //   genderName: "Nam",
  //   soleName: "ƒë·∫ø gi√†y",
  //   description: "m√¥ t·∫£ v·ªÅ gi√†y",
  // };
  const [loading, setLoading] = useState(false);
  const [size, setSize] = useState(Number(sizeId));
  const [color, setColor] = useState(Number(colorId));

  const [quantityAddCart, setQuantityAddCart] = useState(1);

  const [sizeChartModal, setSizeChartModal] = useState(false);
  const [getProductDetail, setGetProductDetail] = useState({});
  const [sizes, setSizes] = useState([]);
  const [sizesOfColor, setSizesOfColor] = useState([]);
  const [colors, setColors] = useState([]);
  const [productHadviewsDescs, setProductHadviewsDescs] = useState();
  const [PageProductHadviewsDescs, setPageProductHadviewsDescs] = useState({
    current: 1,
    pageSize: 6,
  });
  const navigate = useNavigate();

  useEffect(() => {
    // console.log(id);
    console.log(
      "üõí ƒê√¢y l√† user hi·ªán t·∫°i:",
      JSON.parse(localStorage.getItem(`user`)) || []
    );
    getProductDetails(productId, colorId, sizeId);
    getSizesOfProductAndColors(productId, colorId);
    getColorsOfProduct(productId);
    getSizesOfProduct(productId);
    getAllProductHadViewsDescs();
    clearBill();
    clearVoucher()
  }, [productId, colorId, sizeId]);
  // Khi thay ƒë·ªïi color, c·∫≠p nh·∫≠t danh s√°ch size t∆∞∆°ng ·ª©ng
  useEffect(() => {
    const fetchSizesAndProductDetails = async () => {
      if (productId && color) {
        try {
          const sizesData = await getSizesOfProductAndColors(productId, color);

          if (Array.isArray(sizesData) && sizesData.length > 0) {
            setSize(sizesData[0].id); // C·∫≠p nh·∫≠t size v·ªõi gi√° tr·ªã ƒë·∫ßu ti√™n trong danh s√°ch
            await getProductDetails(productId, color, sizesData[0].id); // G·ªçi API sau khi ƒë√£ c√≥ size
          } else {
            setSize(null); // N·∫øu kh√¥ng c√≥ size n√†o, reset size
          }
        } catch (error) {
          console.error("Error fetching sizes or product details:", error);
        }
      }
    };

    fetchSizesAndProductDetails();
  }, [color]);

  // Khi thay ƒë·ªïi size, c·∫≠p nh·∫≠t chi ti·∫øt s·∫£n ph·∫©m
  useEffect(() => {
    if (productId && color && size) {
      getProductDetails(productId, color, size);
    }
  }, [size]);

  // Khi danh s√°ch size c·ªßa color thay ƒë·ªïi, ch·ªçn gi√° tr·ªã ƒë·∫ßu ti√™n l√†m default
  useEffect(() => {
    if (sizesOfColor.length > 0) {
      setSize(sizesOfColor[0]?.id);
    }
  }, [sizesOfColor]);

  const getAllProductHadViewsDescs = async () => {
    setLoading(true);
    try {
      const response = await getAllProducthadViewsDesc(
        PageProductHadviewsDescs
      );
      console.log(
        "Response t·∫•t c√° s·∫£n ph·∫©m c√≥ view t·ª´ nhi·ªÅu t·ªõi √≠t:",
        response
      ); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setProductHadviewsDescs(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };
  const getProductDetails = async (productId, colorId, sizeId) => {
    setLoading(true);
    try {
      const response = await apigetProductDetail(productId, colorId, sizeId);
      console.log("Response get product detail:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setGetProductDetail(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };
  const getSizesOfProduct = async (productId) => {
    setLoading(true);
    try {
      const response = await apiGetSizesOfProduct(productId);
      console.log("Response get sizes:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setSizes(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };
  const getSizesOfProductAndColors = async (productId, colorId) => {
    setLoading(true);
    try {
      const response = await apiGetSizesOfProductAndColor(productId, colorId);
      console.log("Response get sizes of product and color:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setSizesOfColor(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };
  const getColorsOfProduct = async (productId) => {
    setLoading(true);
    try {
      const response = await apiGetColorsOfProduct(productId);
      console.log("Response get colors:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setColors(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };
  const addProductToCart = async (productAddCart) => {
    setLoading(true);
    try {
      const response = await apiAddCart(productAddCart);
      console.log("Response add cart:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };
  return (
    <>
      <Content
        style={{
          backgroundColor: "white",
          paddingTop: "3rem",
          paddingBottom: "3rem",
        }}
      >
        <Row>
          <Col span={11}>
            <Row justify="center">
              <Col
                span={24}
                style={{
                  display: "flex",
                  justifyContent: "center",
                }}
              >
                <Image
                  alt="S·∫£n ph·∫©m"
                  src={
                    getProductDetail?.image?.length > 0
                      ? getProductDetail.image[0]?.url
                      : "https://placehold.co/500x550?text=No+Image" // ·∫¢nh placeholder n·∫øu kh√¥ng c√≥ ·∫£nh s·∫£n ph·∫©m
                  }
                  style={{
                    height: "550px",
                    width: "500px",
                    objectFit: "contain",
                    border: "1px solid #ddd",
                    borderRadius: "8px",
                    backgroundColor:
                      getProductDetail?.image?.length > 0
                        ? "transparent"
                        : "#f5f5f5", // N·ªÅn x√°m n·∫øu kh√¥ng c√≥ ·∫£nh
                  }}
                />
              </Col>
              <Col
                span={24}
                style={{
                  display: "flex",
                  justifyContent: "center",
                  marginTop: "10px",
                }}
              >
                <Image.PreviewGroup>
                  <div style={{ display: "flex", gap: "10px" }}>
                    {(getProductDetail.image?.length > 0
                      ? getProductDetail.image
                      : Array(5).fill(null)
                    )
                      .slice(0, 5) // ƒê·∫£m b·∫£o ch·ªâ l·∫•y t·ªëi ƒëa 5 ·∫£nh ho·∫∑c placeholder
                      .map((item, index) => (
                        <Image
                          key={index}
                          width={80}
                          height={90}
                          src={
                            item
                              ? item.url
                              : "https://placehold.co/80x90?text=No+Image"
                          } // N·∫øu kh√¥ng c√≥ ·∫£nh, hi·ªÉn th·ªã placeholder
                          alt={item ? `·∫¢nh ${index + 1}` : "Kh√¥ng c√≥ ·∫£nh"}
                          style={{
                            objectFit: "cover",
                            border: "1px solid #ddd",
                            borderRadius: "5px",
                            backgroundColor: item ? "transparent" : "#f5f5f5", // N·ªÅn x√°m nh·∫π n·∫øu kh√¥ng c√≥ ·∫£nh
                          }}
                        />
                      ))}
                  </div>
                </Image.PreviewGroup>
              </Col>
            </Row>
          </Col>
          <Col span={13} style={{ position: "relative", minHeight: "300px" }}>
            <Col span={24}>
              <h3>{getProductDetail.productName}</h3>
            </Col>
            <Col
              span={24}
              style={{
                backgroundColor: "#f3702110",
                color: `${COLORS.pending}`,
                padding: "20px",
                marginLeft: "1rem",
              }}
            >
              <h2>
                {getProductDetail.promotion?.discountValue ? (
                  <div>
                    {new Intl.NumberFormat("vi-VN", {
                      style: "currency",
                      currency: "VND",
                      minimumFractionDigits: 1, // Hi·ªÉn th·ªã t·ªëi thi·ªÉu 2 ch·ªØ s·ªë sau d·∫•u ph·∫©y
                      maximumFractionDigits: 1, // Gi·ªõi h·∫°n t·ªëi ƒëa 2 ch·ªØ s·ªë sau d·∫•u ph·∫©y
                    }).format(
                      getProductDetail.price -
                        (getProductDetail.price *
                          getProductDetail.promotion?.discountValue) /
                          100
                    )}{" "}
                    <span
                      style={{
                        textDecoration: "line-through",
                        marginLeft: "8px",
                        fontSize: "1.5rem",
                        color: "GrayText",
                      }}
                    >
                      {new Intl.NumberFormat("vi-VN", {
                        style: "currency",
                        currency: "VND",
                        minimumFractionDigits: 1,
                        maximumFractionDigits: 1,
                      }).format(getProductDetail.price)}
                    </span>
                    <sup style={{fontSize:"2rem", color:"red"}}>-{getProductDetail.promotion?.discountValue}%</sup>
                  </div>
                ) : (
                  new Intl.NumberFormat("vi-VN", {
                    style: "currency",
                    currency: "VND",
                    // minimumFractionDigits: 1,
                    // maximumFractionDigits: 1,
                  }).format(getProductDetail.price)
                )}
              </h2>
            </Col>
            <Row gutter={[20, 30]}>
              <Col
                span={24}
                style={{
                  marginTop: "3rem",
                }}
              >
                <Row>
                  <Col span={6}>V·∫≠n chuy·ªÉn</Col>
                  <Col span={18}>Giao h√†ng nhanh</Col>
                </Row>
              </Col>
              <Col span={24}>
                <Row>
                  <Col span={6}>M√†u s·∫Øc</Col>
                  <Col span={18}>
                    <Col span={18}>
                      <Radio.Group
                        value={color}
                        onChange={(e) => setColor(e.target.value)}
                      >
                        <Space>
                          {Array.isArray(colors) &&
                            colors.map((item) => (
                              <Radio.Button
                                key={item.id}
                                value={item.id}
                                style={{
                                  borderRadius: "10px",
                                  border: "1px solid #ccc",
                                  display: "flex",
                                  alignItems: "center",
                                  padding: "8px",
                                }}
                              >
                                <div
                                  style={{
                                    display: "flex",
                                    alignItems: "center",
                                    gap: "8px",
                                  }}
                                >
                                  <div
                                    style={{
                                      width: "1rem",
                                      height: "1rem",
                                      borderRadius: "50%",
                                      backgroundColor: item.code,
                                      border: "1px solid gray",
                                    }}
                                  />
                                  <span>{item.colorName}</span>
                                </div>
                              </Radio.Button>
                            ))}
                        </Space>
                      </Radio.Group>
                    </Col>
                  </Col>
                </Row>
              </Col>
              <Col span={24}>
                <Row>
                  <Col span={6}>K√≠ch c·ª°</Col>
                  <Col span={18}>
                    <Radio.Group
                      value={size}
                      onChange={(e) => {
                        setSize(e.target.value);
                      }}
                    >
                      <Space>
                        {sizes.map((item) => (
                          <Radio.Button
                            key={item.id}
                            value={item.id}
                            disabled={
                              !sizesOfColor.some((size) => size.id === item.id)
                            } // ƒê√∫ng logic disable
                            style={{
                              borderRadius: "10px",
                              border: "1px solid #ccc",
                            }}
                          >
                            {item.sizeName}
                          </Radio.Button>
                        ))}
                      </Space>
                    </Radio.Group>

                    <Col
                      style={{ cursor: "pointer", paddingTop: "1rem" }}
                      onClick={() => {
                        setSizeChartModal(true);
                      }}
                    >
                      B·∫£ng quy ƒê·ªïi k√≠ch c·ª° <FcNext />
                    </Col>
                  </Col>
                </Row>
              </Col>
              <Col span={24}>
                <Row>
                  <Col span={6}>S·ªë l∆∞·ª£ng</Col>
                  <Col span={18}>
                    <InputNumber
                      defaultValue={1}
                      value={quantityAddCart}
                      min={1}
                      max={getProductDetail.quantity}
                      onChange={(value) => {
                        setQuantityAddCart(value); // C·∫≠p nh·∫≠t state khi thay ƒë·ªïi s·ªë l∆∞·ª£ng
                      }}
                    />
                    <div>S·ªë l∆∞·ª£ng c√≤n: {getProductDetail.quantity}</div>
                  </Col>
                </Row>
              </Col>
              <Col span={24}>
                <Row>
                  <Col span={6}>∆Øu ƒë√£i, gi·∫£m gi√°</Col>
                  <Col span={18}>Vocher, gi·∫£m gi√°</Col>
                </Row>
              </Col>
              <Col
                style={{ position: "absolute", bottom: "0rem", width: "100%" }}
              >
                <Space>
                  {/* N√∫t "Th√™m V√†o Gi·ªè H√†ng" */}
                  <Button
                    type="default"
                    style={{
                      color: `${COLORS.pending}`,
                      borderColor: `${COLORS.primary}`,
                      backgroundColor: `${COLORS.backgroundcolor2}`,
                      padding: "25px",
                    }}
                    onClick={async () => {
                      // clearCart()
                      const user = JSON.parse(localStorage.getItem(`user`));
                      if (quantityAddCart > getProductDetail.quantity) {
                        toast.warn(
                          "s·ªë l∆∞·ª£ng th√™m v√†o gi·ªè h√†ng ph·∫£i nh·ªè h∆°n s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c√≥"
                        );
                        return;
                      }
                      if (user) {
                        await addProductToCart({
                          customerId: user.id,
                          productDetailId: getProductDetail.id,
                          quantityAddCart: quantityAddCart,
                          price: getProductDetail.promotion?.discountValue
                            ? getProductDetail.price -
                              (getProductDetail.price *
                                getProductDetail.promotion.discountValue) /
                                100
                            : getProductDetail.price,
                          productName: `${getProductDetail.productName} [${getProductDetail.colorName}-${getProductDetail.sizeName}]`,
                          image: getProductDetail.image[0]?.url || "",
                        });
                        window.dispatchEvent(new Event("cartUpdated"));
                      } else {
                        addToCart({
                          productDetailId: getProductDetail.id,
                          quantityAddCart: quantityAddCart,
                          price: getProductDetail.promotion?.discountValue
                            ? getProductDetail.price -
                              (getProductDetail.price *
                                getProductDetail.promotion.discountValue) /
                                100
                            : getProductDetail.price,
                          productName: getProductDetail.productName,
                          image: getProductDetail.image[0]?.url || "",
                          sizeName: getProductDetail.sizeName,
                          colorName: getProductDetail.colorName,
                        });
                        window.dispatchEvent(new Event("cartUpdated"));
                      }

                      // notification.success({
                      //   message: "Success",
                      //   duration: 4,
                      //   pauseOnHover: false,
                      //   showProgress: true,
                      //   description: `Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!`,
                      // });
                      toast.success("Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!");
                      console.log(getCart());
                    }}
                  >
                    <FaCartPlus size={23} />
                    Th√™m V√†o Gi·ªè H√†ng
                  </Button>

                  {/* N√∫t "Mua Ngay" */}
                  <Button
                    type="primary"
                    style={{
                      backgroundColor: `${COLORS.primary}`,
                      borderColor: "#E44D26",
                      padding: "25px",
                    }}
                    onClick={() => {
                      if (quantityAddCart > getProductDetail.quantity) {
                        toast.warn(
                          "s·ªë l∆∞·ª£ng th√™m v√†o gi·ªè h√†ng ph·∫£i nh·ªè h∆°n s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c√≥"
                        );
                        return;
                      }
                      addToBill({
                        productDetailId: getProductDetail.id,
                        quantityAddCart: quantityAddCart,
                        price: getProductDetail.promotion?.discountValue
                        ? getProductDetail.price -
                          (getProductDetail.price *
                            getProductDetail.promotion.discountValue) /
                            100
                        : getProductDetail.price,                        productName: getProductDetail.productName,
                        image: getProductDetail.image[0]?.url || "",
                        sizeName: getProductDetail.sizeName,
                        colorName: getProductDetail.colorName,
                      });
                      navigate("/payment");
                      toast.success("x√°c nh·∫≠n mua h√†ng");
                    }}
                  >
                    Mua Ngay
                  </Button>
                </Space>
              </Col>
            </Row>
          </Col>
        </Row>
      </Content>
      <Content
        style={{ backgroundColor: "white", padding: "20px", marginTop: "1rem" }}
      >
        <Row>
          <Col
            span={24}
            style={{
              backgroundColor: `${COLORS.backgroundcolor2}`,
              padding: "15px",
              color: `${COLORS.pending}`,
            }}
          >
            CHI TI·∫æT S·∫¢N PH·∫®M
          </Col>
          <Row span={24} style={{ marginLeft: "3rem", margin: "1rem" }}>
            <Col
              span={24}
              style={{
                marginTop: "1rem",
              }}
            >
              <Row>
                <Col span={6}>T√™n gi√†y</Col>
                <Col span={18}>{getProductDetail.brandName}</Col>
              </Row>
            </Col>
            <Col
              span={24}
              style={{
                marginTop: "1rem",
              }}
            >
              <Row>
                <Col span={6}>Lo·∫°i gi√†y</Col>
                <Col span={18}>{getProductDetail.typeName}</Col>
              </Row>
            </Col>
            <Col
              span={24}
              style={{
                marginTop: "1rem",
              }}
            >
              <Row>
                <Col span={6}>Th∆∞∆°ng hi·ªáu</Col>
                <Col span={18}>{getProductDetail.brandName}</Col>
              </Row>
            </Col>
            <Col
              span={24}
              style={{
                marginTop: "1rem",
              }}
            >
              <Row>
                <Col span={6}>M√†u s·∫Øc</Col>
                <Col span={18}>{getProductDetail.colorName}</Col>
              </Row>
            </Col>

            <Col
              span={24}
              style={{
                marginTop: "1rem",
              }}
            >
              <Row>
                <Col span={6}>Ch·∫•t li·ªáu</Col>
                <Col span={18}>{getProductDetail.materialName}</Col>
              </Row>
            </Col>
            <Col
              span={24}
              style={{
                marginTop: "1rem",
              }}
            >
              <Row>
                <Col span={6}>ƒê·∫ø gi√†y</Col>
                <Col span={18}>{getProductDetail.soleName}</Col>
              </Row>
            </Col>
            <Col
              span={24}
              style={{
                marginTop: "1rem",
              }}
            >
              <Row>
                <Col span={6}>S·ªë l∆∞·ª£ng</Col>
                <Col span={18}>{getProductDetail.quantity}</Col>
              </Row>
            </Col>
          </Row>
        </Row>
        <Row justify="center">
          <Col
            span={24}
            style={{
              backgroundColor: `${COLORS.backgroundcolor2}`,
              padding: "15px",
              color: `${COLORS.pending}`,
            }}
          >
            M√¥ T·∫¢ S·∫¢N PH·∫®M
          </Col>
          <Col style={{ marginLeft: "1rem", margin: "1rem" }}>
            {getProductDetail.description}
            ‚ñ∂Ô∏è H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG V√Ä B·∫¢O QU·∫¢N GI√ÄY : ƒê·ªÉ ƒë√¥i gi√†y c·ªßa b·∫°n lu√¥n b·ªÅn
            ƒë·∫πp v√† gi·ªØ ƒë∆∞·ª£c ch·∫•t l∆∞·ª£ng l√¢u d√†i, vui l√≤ng l∆∞u √Ω m·ªôt s·ªë h∆∞·ªõng d·∫´n
            sau:
            <br /> üëâGi·∫∑t gi√†y ƒë√∫ng c√°ch: Tr√°nh s·ª≠ d·ª•ng c√°c ch·∫•t t·∫©y r·ª≠a m·∫°nh
            nh∆∞ thu·ªëc t·∫©y, thay v√†o ƒë√≥ b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c nguy√™n li·ªáu t·ª±
            nhi√™n ƒë·ªÉ l√†m s·∫°ch nh∆∞ v·ªè chu·ªëi, s·ªØa t∆∞∆°i, gi·∫•m‚Ä¶ Gi√∫p gi√†y s·∫°ch s·∫Ω m√†
            kh√¥ng l√†m h∆∞ h·∫°i ch·∫•t li·ªáu.
            <br /> üëâKh√¥ng ng√¢m gi√†y qu√° l√¢u trong n∆∞·ªõc: Vi·ªác ng√¢m gi√†y trong
            n∆∞·ªõc l√¢u c√≥ th·ªÉ l√†m gi·∫£m ƒë·ªô b·ªÅn c·ªßa ch·∫•t li·ªáu, ƒë·∫∑c bi·ªát l√† c√°c lo·∫°i
            da, v·∫£i hay cao su.
            <br /> üëâV·ªá sinh th∆∞·ªùng xuy√™n v·ªõi s·∫£n ph·∫©m s√°ng m√†u: V·ªõi c√°c ƒë√¥i
            gi√†y c√≥ m√†u s√°ng, b·∫°n n√™n v·ªá sinh gi√†y th∆∞·ªùng xuy√™n ƒë·ªÉ gi·ªØ m√†u s·∫Øc
            t∆∞∆°i m·ªõi v√† tr√°nh v·∫øt b·∫©n b√°m l√¢u ng√†y kh√≥ l√†m s·∫°ch.
            <br /> üëâC·∫•t gi·ªØ gi√†y ƒë√∫ng c√°ch: Tr√°nh ƒë·ªÉ gi√†y ∆∞·ªõt ho·∫∑c ·∫©m ∆∞·ªõt khi
            c·∫•t gi·ªØ, v√¨ ƒëi·ªÅu n√†y c√≥ th·ªÉ g√¢y m√πi v√† l√†m gi·∫£m tu·ªïi th·ªç c·ªßa gi√†y.
            H√£y ƒë·ªÉ gi√†y kh√¥ tho√°ng tr∆∞·ªõc khi c·∫•t trong t·ªß.
            <br /> ‚ñ∂Ô∏èCH√çNH S√ÅCH B·∫¢O H√ÄNH V√Ä D·ªäCH V·ª§ CHƒÇM S√ìC KH√ÅCH H√ÄNG Ch√∫ng
            t√¥i cam k·∫øt mang ƒë·∫øn s·ª± h√†i l√≤ng tuy·ªát ƒë·ªëi cho kh√°ch h√†ng v·ªõi ch√≠nh
            s√°ch b·∫£o h√†nh v√† chƒÉm s√≥c chu ƒë√°o:
            <br /> üëâB·∫£o h√†nh 15 ng√†y: B·∫°n s·∫Ω ƒë∆∞·ª£c b·∫£o h√†nh mi·ªÖn ph√≠ trong 15
            ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n s·∫£n ph·∫©m n·∫øu gi√†y b·ªã l·ªói t·ª´ nh√† s·∫£n xu·∫•t ho·∫∑c
            kh√¥ng ƒë√∫ng m·∫´u m√£. Mi·ªÖn ph√≠ ƒë·ªïi tr·∫£: N·∫øu s·∫£n ph·∫©m g·∫∑p ph·∫£i s·ª± c·ªë nh∆∞
            sai size, l·ªói s·∫£n ph·∫©m, ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ ƒë·ªïi tr·∫£ ho√†n to√†n mi·ªÖn
            ph√≠. Ch√≠nh s√°ch ƒë·ªïi s·∫£n ph·∫©m: Qu√Ω kh√°ch c√≥ th·ªÉ ƒë·ªïi s·∫£n ph·∫©m m·ªõi c√≥
            gi√° tr·ªã t∆∞∆°ng ƒë∆∞∆°ng ho·∫∑c cao h∆°n so v·ªõi s·∫£n ph·∫©m c≈©, gi√∫p b·∫°n d·ªÖ
            d√†ng t√¨m ƒë∆∞·ª£c s·∫£n ph·∫©m ph√π h·ª£p h∆°n.
            <br /> üëâCh·ªâ ƒë·ªïi tr·∫£ 1 l·∫ßn: M·ªói s·∫£n ph·∫©m ch·ªâ c√≥ th·ªÉ ƒë·ªïi tr·∫£ 1 l·∫ßn
            duy nh·∫•t, v√¨ v·∫≠y h√£y ch·∫Øc ch·∫Øn ch·ªçn l·ª±a s·∫£n ph·∫©m k·ªπ c√†ng tr∆∞·ªõc khi
            quy·∫øt ƒë·ªãnh ƒë·ªïi.
            <br /> ‚ñ∂Ô∏èC·∫¢M ∆†N QU√ù KH√ÅCH Ch√∫ng t√¥i r·∫•t c·∫£m ∆°n qu√Ω kh√°ch ƒë√£ tin
            t∆∞·ªüng v√† ·ªßng h·ªô shop. ƒê·ª´ng qu√™n nh·∫•n "Theo d√µi" ƒë·ªÉ c·∫≠p nh·∫≠t nh·ªØng
            s·∫£n ph·∫©m m·ªõi nh·∫•t, ∆∞u ƒë√£i h·∫•p d·∫´n, c≈©ng nh∆∞ th√¥ng tin gi·∫£m gi√° ƒë·∫∑c
            bi·ªát t·ª´ shop. Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng ph·ª•c v·ª• v√† mang ƒë·∫øn cho b·∫°n
            nh·ªØng tr·∫£i nghi·ªám mua s·∫Øm tuy·ªát v·ªùi!
          </Col>
        </Row>
      </Content>

      <Content
        style={{ backgroundColor: "white", padding: "20px", marginTop: "1rem" }}
      >
        <Row justify="center">
          <Col
            span={24}
            style={{
              backgroundColor: `${COLORS.backgroundcolor2}`,
              padding: "15px",
              color: `${COLORS.pending}`,
            }}
          >
            D√ÅNH GI√Å S·∫¢N PH·∫®M
          </Col>
          <Col span={24}>
            <CommentSection id={getProductDetail.id} />
          </Col>
        </Row>
      </Content>

      <Content
        style={{ backgroundColor: "white", padding: "20px", marginTop: "1rem" }}
      >
        <Row justify="center">
          <Col
            span={24}
            style={{
              backgroundColor: "#FAFAFA",
              padding: "15px",
              color: `${COLORS.pending}`,
            }}
          >
            S·∫¢N PH·∫®M N·ªîI B·∫¨T
          </Col>
          <Col span={24}>
            <Row gutter={[5, 5]}>
              {productHadviewsDescs?.map((product, index) => (
                <Col
                  key={index}
                  span={4}
                  onClick={() => {
                    window.location.replace(
                      `/products/product-detail/${product.productId}?colorId=${product.colorId}&sizeId=${product.sizeId}`
                    );
                  }}
                  style={{ cursor: "pointer" }}
                >
                  <PropProduct
                    product={{
                      name:
                        product.productName?.trim() || "S·∫£n ph·∫©m ch∆∞a c√≥ t√™n",
                      price: product.price ?? 0,
                      promotion:
                        product.promotionName === "Kh√¥ng c√≥ khuy·∫øn m√£i"
                          ? null
                          : product.promotionName,
                      sale: product.sold ?? 0,
                      url: product.imageUrl || "https://placehold.co/100",
                      views: product.views ?? 0,
                      rate: product.rate ?? 5,
                    }}
                  />
                </Col>
              ))}
            </Row>
          </Col>
        </Row>
      </Content>
      <SizeChart
        onOpen={sizeChartModal}
        onCancel={() => {
          setSizeChartModal(false);
        }}
      />
    </>
  );
}

export default ProductDetail;

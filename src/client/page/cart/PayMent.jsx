import React, { useState, useMemo, useEffect } from "react";
import {
  Form,
  Input,
  Select,
  Button,
  message,
  Row,
  Col,
  Table,
  Divider,
  Radio,
  Space,
  Switch,
  Flex,
  Typography,
} from "antd";
import { LuTicket } from "react-icons/lu";
import { useForm, Controller, get, useWatch } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { Content } from "antd/es/layout/layout";
import Title from "antd/es/typography/Title";
import Paragraph from "antd/es/typography/Paragraph";
// import AddressSelector from "../../../admin/utils/AddressSelectorAntd";
import AddressSelectorGHN from "../../componetC/AddressSelectorGHN";
import {
  calculateShippingFee,
  generateAddressString,
  tinhThoiGianGiaoHang,
} from "../../componetC/apiGHN";
import moment from "moment/moment";
import { useProduct } from "../../../store/ProductContext";
import { clearBill, getBill } from "./bill";
import { formatVND } from "../../../helpers/Helpers";
import { useNavigate } from "react-router-dom";
import { FcAbout, FcShipped } from "react-icons/fc";
import { apiCreateBillClient } from "./payment";
import { clearVoucher, getVoucher } from "./voucher";
import { COLORS } from "../../../constants/constants";
import { removeBillFromCart } from "./cart";
import { FaLocationDot } from "react-icons/fa6";
import { apiGetAddressDefaut, apiGetFreeShip } from "./apiPayment";
import { FaMoneyBill } from "react-icons/fa6";
import { DollarOutlined } from "@ant-design/icons";
import {toast} from "react-toastify";
import { apiFindVoucherValid, apiVoucherBest } from "./apiCart";

const { Text } = Typography;

const { Option } = Select;

// Schema validation

const schema = yup.object().shape({
  fullName: yup.string().required("Vui l√≤ng nh·∫≠p h·ªç v√† t√™n."),
  phone: yup
    .string()
    .required("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i.")
    .matches(/^\d{10,11}$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"),
  email: yup
    .string()
    .email("Email kh√¥ng h·ª£p l·ªá")
    .required("Vui l√≤ng nh·∫≠p email."),
  // city: yup.string().required("Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë."),
  // district: yup.string().required("Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán."),
  // notes: yup.string()("Vui l√≤ng nh·∫≠p l∆∞u √Ω khi giao h√†ng."),
});

// H√†m chuy·ªÉn ƒë·ªïi gi√° t·ª´ string th√†nh s·ªë
const parsePrice = (price) => {
  if (typeof price === "number") return price; // N·∫øu ƒë√£ l√† s·ªë, tr·∫£ v·ªÅ lu√¥n
  if (!price || typeof price !== "string") return 0; // N·∫øu `price` null/undefined, tr·∫£ v·ªÅ 0
  return Number(price.replace(/[^\d]/g, "")); // X√≥a k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
};

const PayMent = () => {
  const navigate = useNavigate();
  const [user, setUser] = useState(() =>
    JSON.parse(localStorage.getItem("user"))
  ); // L·∫•y user t·ª´ localStorage
  const [billDone, setBillDone] = useState(); // 1 m·∫£ng c√°c s·∫£n ph·∫©m
  const [loading, setLoading] = useState(false); // 1 m·∫£ng c√°c s·∫£n ph·∫©m
  const [paymentMethod, setPaymentMethod] = useState("COD");
  const [fullAddress, setFullAddress] = useState("ƒêang t·∫£i...");
  const [productData, setProductData] = useState(getBill()); // 1 m·∫£ng c√°c s·∫£n ph·∫©m
  const [voucher, setVoucher] = useState(getVoucher()); // 1 m·∫£ng c√°c s·∫£n ph·∫©m
  const [selectedAddress, setSelectedAddress] = useState(null);
  const [moneyBeforeDiscount, setMoneyBeforeDiscount] = useState(null);
  const [minOrderValue, setMinOrderValue] = useState(0);
  const [timeGiaoHang, setTimeGiaoHang] = useState(null);
  const [bill, setbill] = useState({
    paymentMethodsType: "COD",
    customerId: null,
    customerMoney: null,
    discountMoney: 0,
    totalMoney: 0,
    moneyAfter: 0,
    moneyBeforeDiscount:0,
    desiredDateOfReceipt: null,
    shipDate: null,
    shippingAddressId: null,
    email: "string",
    notes: "string",
    voucherId: 0,
    recipientName: "string",
    recipientPhoneNumber: "string",
    shipMoney: 0,
    address: {
      provinceId: "string",
      districtId: "string",
      wardId: "string",
      isAddressDefault: true,
      specificAddress: "string",
    },
    billDetailRequests: getBill().map((item) => ({
      productDetailId: item.productDetailId,
      quantity: item.quantityAddCart, // ƒê·∫£m b·∫£o ƒë√∫ng field
      price: item.price,
      image: item.image,
    })),
  });
  const [discountCode, setDiscountCode] = useState();
  const [voucherValid, setVoucherValid] = useState([]);
  const [voucherBests, setVoucherBest] = useState([]);
  const [discount, setDiscount] = useState(0);
  const [appliedDiscount, setAppliedDiscount] = useState("");
  const vouchersValid = async () => {
    try {
      const res = await apiFindVoucherValid({ customerId: user?.id });
      setVoucherValid(res.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    }
  };
  const voucherBest = async () => {
    try {
      const res = await apiVoucherBest({
        customerId: user?.id,
        totalBillMoney: caculamoneyBeforeDiscount,
      });
      if(voucher[0]?.voucherId==null){
        setDiscountCode(res.data?.voucher?.id);
      }else{
        setDiscountCode(voucher[0]?.voucherId);
        setDiscount(voucher[0]?.discountValue);
      }
      setVoucherBest(res.data);

      // setDiscount(0);
      // setAppliedDiscount("");
      console.log("vocher", res.data?.voucher?.id);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    }
  };
  const applyDiscount = () => {
    const selectedVoucher = voucherValid.find((v) => v.id === discountCode);
    if (!selectedVoucher) {
      setDiscount(0);
      setAppliedDiscount(null);
      message.error("M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá!");
      return;
    }

    const {
      voucherCode,
      discountValue,
      discountType,
      discountMaxValue,
      billMinValue,
    } = selectedVoucher;
    if (caculamoneyBeforeDiscount < billMinValue) {
      message.error(
        "Gi√° tr·ªã ƒë∆°n h√†ng ch∆∞a ƒë·∫°t m·ª©c t·ªëi thi·ªÉu ƒë·ªÉ √°p d·ª•ng voucher!"
      );
      return;
    }

    let discountAmount = 0;
    if (discountType === "PERCENT") {
      discountAmount = (caculamoneyBeforeDiscount * discountValue) / 100;
      discountAmount = Math.min(discountAmount, discountMaxValue);
    } else if (discountType === "MONEY") {
      discountAmount = Math.min(discountValue, caculamoneyBeforeDiscount);
    }

    setDiscount(discountAmount);
    setAppliedDiscount(
      `M√£ ${voucherCode} - Gi·∫£m ${discountAmount.toLocaleString()} ƒë`
    );
    message.success("M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng!");
  };
  useEffect(() => {
    console.log("üè† ƒê·ªãa ch·ªâ ƒë√£ ch·ªçn:", selectedAddress);
  }, [selectedAddress]);

  const {
    control,
    handleSubmit,
    formState: { errors },
    getValues,
    reset,
    watch,
  } = useForm({
    resolver: yupResolver(schema),
    defaultValues: {
      fullName: user?.fullName || "",
      phone: user?.phoneNumber || "",
      email: user?.email || "",
      notes: user?.address || "",
    },
  });
  // contexxt
  const { products } = useProduct(); // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ Context
  useEffect(() => {
    // setProductData(getBill());
    console.log("prodauct day nay", products);
    console.log("üõí ƒê√¢y l√† bill hi·ªán t·∫°i:", getBill());
    console.log("üõí vocher:", getVoucher());

    console.log("üõí ƒê√¢y l√† user hi·ªán t·∫°i:", user || []);
   
    apiGetFreeShip().then((res) => {
      setMinOrderValue(res);
    });
    console.log("üõí ƒê√¢y l√† minOrderValue:", minOrderValue);
    return () => {
      clearBill();
      clearVoucher();
    };
  }, []);

  useEffect(() => {
 
    if (user) {
      getAddressDf(user?.id);
    }
  }, [user]);

  useEffect(() => {
    vouchersValid();
    voucherBest();
    setbill((prev) => ({
      ...prev,
      totalMoney: totalAmountNoship,
      moneyAfter: totalAmount,
    }));
  }, [bill?.shipMoney]);
  const getAddressDf = async (id) => {
    try {
      console.log("üîç G·ªçi API l·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh v·ªõi ID:", id);
      const res = await apiGetAddressDefaut({ customerId: id });
      console.log("‚úÖ D·ªØ li·ªáu ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh:", res);

      const newAddress = {
        provinceId: res.data?.provinceId || "",
        districtId: res.data?.districtId || "",
        wardId: res.data?.wardId || "",
        specificAddress: res.data?.specificAddress || "",
      };

      setSelectedAddress(newAddress);
      const totalFee = caculamoneyBeforeDiscount >=await apiGetFreeShip() ? 0 : await calculateShippingFee({
        toWardCode: String(newAddress?.wardId),
        toDistrictId: Number(newAddress?.districtId),
      });
      setbill((prevbill) => ({
        ...prevbill,
        detailAddressShipping: newAddress,
        shipMoney: totalFee,
      }));
      generateAddressString(
        newAddress.provinceId,
        newAddress.districtId,
        newAddress.wardId,
        newAddress.specificAddress ?? ""
      ).then((address) => {
        setFullAddress(address);
      });
      tinhThoiGianGiaoHang({
        fromDistrictId: newAddress?.districtId,
        fromWardCode: newAddress?.wardId,
        toDistrictId: newAddress?.districtId,
        toWardCode: newAddress?.wardId,
        serviceId: 1,
      }).then((res) => {
        console.log("üîç Th·ªùi gian giao h√†ng:", res);
        setTimeGiaoHang(res);
      });

      console.log("üìå ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh sau khi c·∫≠p nh·∫≠t:", newAddress);
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh:", error);
      // message.warning("Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh!");
    }
  };

  const onAddressChange = async (
    selectedProvince,
    selectedDistrict,
    selectedWard,
    specificAddress
  ) => {
    let totalFee = 0;
    if (selectedWard != null) {
      totalFee = await calculateShippingFee({
        toWardCode: String(selectedWard),
        toDistrictId: selectedDistrict,
      });
    }

    const newAddress = {
      provinceId: selectedProvince,
      districtId: selectedDistrict,
      wardId: selectedWard,
      specificAddress: specificAddress ?? "",
    };

    setSelectedAddress(newAddress); // L∆∞u ƒë·ªãa ch·ªâ ƒë∆∞·ª£c ch·ªçn

    setbill((prevbill) => ({
      ...prevbill,
      detailAddressShipping: newAddress,
      shipMoney: totalFee,
    }));
    generateAddressString(
      selectedProvince,
      selectedDistrict,
      selectedWard,
      specificAddress ?? ""
    ).then((address) => {
      setFullAddress(address);
    });
    tinhThoiGianGiaoHang({
      fromDistrictId: newAddress?.districtId,
      fromWardCode: newAddress?.wardId,
      toDistrictId: newAddress?.districtId,
      toWardCode: newAddress?.wardId,
      serviceId: 1,
    }).then((res) => {
      console.log("üîç Th·ªùi gian giao h√†ng:", res);
      setTimeGiaoHang(res);
    });
  };

  const handlePaymentMethodChange = (e) => {
    const selectedMethod = e.target.value;
    setPaymentMethod(selectedMethod);
    setbill((prev) => ({
      ...prev,
      paymentMethod: selectedMethod, // C·∫≠p nh·∫≠t v√†o bill
    }));
  };
  // taohoas d∆°n
  const createBillClient = async () => {
    setLoading(true);
    try {
      const response = await apiCreateBillClient(bill);
      console.log("Response h√≥a d∆°n t·∫°o:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setBillDone(response.data);
      return response.data;
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫°o h√≥a ƒë∆°n.");
    } finally {
      setLoading(false);
    }
  };
  // T√≠nh t·ªïng ti·ªÅn t·ª± ƒë·ªông
  const totalAmount = useMemo(() => {
    if (!productData || productData.length === 0) return 0; // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ 0

    let sum = productData.reduce(
      (sum, item) =>
        sum + parsePrice(item.price || 0) * (item.quantityAddCart || 1),
      0
    );
    sum =
      sum +
      parseFloat(bill?.shipMoney) -
      parseFloat(discount|| 0);
    return sum;
  }, [productData, bill?.shipMoney,discount]);

  const totalAmountNoship = useMemo(() => {
    if (!productData || productData.length === 0) return 0; // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ 0

    let sum = productData.reduce(
      (sum, item) =>
        sum + parsePrice(item.price || 0) * (item.quantityAddCart || 1),
      0
    );
    sum = sum - parseFloat(discount|| 0);
    return sum;
  }, [productData, bill?.shipMoney,discount]);

  const caculamoneyBeforeDiscount = useMemo(() => {
    if (!productData || productData.length === 0) return 0; // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ 0

    let sum = productData.reduce(
      (sum, item) =>
        sum + parsePrice(item.price || 0) * (item.quantityAddCart || 1),
      0
    );
    return sum;
  }, [productData, bill?.shipMoney]);
  const columns = [
    {
      title: "S·∫¢N PH·∫®M",
      dataIndex: "productName",
      key: "productName",
      render: (_, record) => (
        <Space>
          <img src={record.image} alt={record.productName} width={60} />
          {record.productName}[{record.colorName}-{record.sizeName}]
        </Space>
      ),
    },
    {
      title: "S·ªê L∆Ø·ª¢NG",
      dataIndex: "quantityAddCart",
      key: "quantityAddCart",
      align: "center",
    },
    {
      title: "ƒê∆†N GI√Å",
      dataIndex: "price",
      key: "price",
      align: "right",
      render: (price) => (
        <span>
          {new Intl.NumberFormat("vi-VN", {
            style: "currency",
            currency: "VND",
            minimumFractionDigits: 1,
            maximumFractionDigits: 1,
          }).format(price)}
        </span>
      ),
    },
    {
      title: "T·∫†M T√çNH",
      dataIndex: "price",
      key: "subtotal",
      align: "right",
      render: (_, record) => (
        <Space>
          {new Intl.NumberFormat("vi-VN", {
            style: "currency",
            currency: "VND",
            minimumFractionDigits: 1,
            maximumFractionDigits: 1,
          }).format(record.price * record.quantityAddCart)}
        </Space>
      ),
    },
  ];

  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleFormSubmit = (data) => {
    if (
      !selectedAddress ||
      !selectedAddress.provinceId ||
      !selectedAddress.districtId ||
      !selectedAddress.wardId
    ) {
      toast.error("Vui l√≤ng ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng tr∆∞·ªõc khi ƒë·∫∑t h√†ng!");
      return;
    }
    setbill((prev) => ({
      ...prev,
      recipientName: data.fullName,
      recipientPhoneNumber: data.phone,
      email: data.email,
      notes: data.notes,
      paymentMethodsType: paymentMethod, // Th√™m ph∆∞∆°ng th·ª©c thanh to√°n v√†o d·ªØ li·ªáu g·ª≠i ƒëi
      customerId: user?.id || null,
      voucherId: discountCode,
      discountMoney: discount,
      moneyBeforeDiscount: caculamoneyBeforeDiscount,
      moneyAfter: totalAmount,
      totalMoney: totalAmountNoship,

      // discountMoney: voucher[0]?.totalAfterDiscount,
    }));

    setIsSubmitting(true); // ƒê√°nh d·∫•u ƒëang submit
  };

  // Khi bill c·∫≠p nh·∫≠t xong th√¨ g·ªçi onSubmit
  useEffect(() => {
    const handleOrder = async () => {
      if (isSubmitting && productData.length > 0) {
        switch (paymentMethod) {
          case "ZALO_PAY": {
            console.log("‚úÖ Bill sau khi c·∫≠p nh·∫≠t:", bill);
            setIsSubmitting(false); // Reset l·∫°i
            toast.success("ƒê·∫∑t h√†ng th√†nh c√¥ng!");

            try {
              const data = await createBillClient();
              if (user) {
                if (data) {
                  window.location.href = data; // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
                } else {
                  alert("L·ªói khi t·∫°o ƒë∆°n h√†ng!");
                }
              } else {
                navigate("/warn-veritify");
              }
            } catch (error) {
              console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
              toast.error("ƒê·∫∑t h√†ng th·∫•t b·∫°i!");
            }
            break;
          }

          default:
            console.log("‚úÖ Bill sau khi c·∫≠p nh·∫≠t:", bill);
            setIsSubmitting(false);
            removeBillFromCart(productData);
            createBillClient();
            if (user) {
              toast.success("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
              navigate(
                `/success?status=1&&amount=${bill.moneyAfter}&&apptransid=ShipCod`
              );
            } else {
              navigate("/warn-veritify");
            }
        }
      } else if (productData.length <= 0 && isSubmitting) {
        toast.warning("Kh√¥ng c√≥ s·∫£n ph·∫©m!");
      }
    };

    handleOrder();
  }, [bill, isSubmitting]);

  const onSubmit = (data) => {
    console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", data);
    console.log("ƒë∆°n h√†ng ƒë·∫∑t", bill);

    navigate(
      `/success?status=1&&amount=${bill.moneyAfter}&&apptransid=ShipCod`
    );

    reset(); // Reset form sau khi g·ª≠i
  };

  return (
    <Content style={{ backgroundColor: "white", padding: "20px" }}>
      <Row gutter={[20, 20]}>
        {/* Form th√¥ng tin kh√°ch h√†ng */}
        <Col span={12} style={{ padding: "1rem" }}>
          <Form
            layout="vertical"
            onFinish={handleSubmit(onSubmit)}
            id="paymentForm"
          >
            <Form.Item
              label="H·ªç v√† t√™n ng∆∞·ªùi nh·∫≠n"
              validateStatus={errors.fullName ? "error" : ""}
              help={errors.fullName?.message}
            >
              <Controller
                name="fullName"
                control={control}
                render={({ field }) => (
                  <Input {...field} placeholder="Nh·∫≠p h·ªç v√† t√™n" />
                )}
              />
            </Form.Item>

            <Form.Item
              label="S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n"
              validateStatus={errors.phone ? "error" : ""}
              help={errors.phone?.message}
            >
              <Controller
                name="phone"
                control={control}
                render={({ field }) => (
                  <Input {...field} placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
                )}
              />
            </Form.Item>

            <Form.Item
              label="Email ng∆∞·ªùi nh·∫≠n"
              validateStatus={errors.email ? "error" : ""}
              help={errors.email?.message}
            >
              <Controller
                name="email"
                control={control}
                render={({ field }) => (
                  <Input {...field} placeholder="Nh·∫≠p email" />
                )}
              />
            </Form.Item>
          </Form>
          <h5>Ch·ªçn ƒë·ªãa ch·ªâ nh·∫≠n h√†ng</h5>
          {/* <AddressSelectorGHN onAddressChange={onAddressChange} /> */}

          <AddressSelectorGHN
            onAddressChange={onAddressChange}
            provinceId={selectedAddress?.provinceId || ""}
            districtId={selectedAddress?.districtId || ""}
            wardId={selectedAddress?.wardId || ""}
            specificAddressDefault={selectedAddress?.specificAddress || ""}
          />

          <Form.Item
            label="L∆∞u √Ω khi v·∫≠n chuy·ªÉn"
            validateStatus={errors.notes ? "error" : ""}
            help={errors.notes?.message}
          >
            <Controller
              name="notes"
              control={control}
              render={({ field }) => (
                <Input.TextArea
                  {...field}
                  placeholder="Nh·∫≠p l∆∞u √Ω khi giao h√†ng"
                  maxLength={200}
                  minLength={0}
                />
              )}
            />
          </Form.Item>
         
        </Col>

        {/* Th√¥ng tin ƒë∆°n h√†ng */}
        <Col span={12} style={{ padding: "1rem", border: "1px solid #ddd" }}>
          <Title level={5}>ƒê∆†N H√ÄNG C·ª¶A B·∫†N</Title>
          <p>
            <FcAbout size={25} /> Anh/Ch·ªã: {watch("fullName")} , sdt:{" "}
            {watch("phone")}
          </p>
          <p>
            <FaLocationDot size={25} style={{ color: "#bd1727" }} />
            ƒê·ªãa ch·ªâ nh·∫≠n h√†ng: {fullAddress}{" "}
          </p>
          <p>
            Th·ªùi gian giao h√†ng d·ª± ki·∫øn: {timeGiaoHang?.thoiGianGiaoHang}
          </p>
          <Table
            columns={columns}
            dataSource={productData}
            pagination={false}
          />
          <Flex justify="space-between">
            <Col>
              <DollarOutlined style={{
                color: COLORS.primary,
                fontSize: "1.3rem"
              }}  /> T·ªïng ti·ªÅn H√†ng mua:{" "}
            </Col>
            + {formatVND(parseInt(caculamoneyBeforeDiscount) || 0)}
          </Flex>
          <Flex justify="space-between">
            <Col>
              <FcShipped size={27} /> Ph√≠ v·∫≠n chuy·ªÉn (GHN): {caculamoneyBeforeDiscount >= minOrderValue ? <span style={{color: "green"}}>(Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn ƒë∆°n h√†ng tr√™n {formatVND(minOrderValue)}  )</span> : ""}
            </Col>
            {caculamoneyBeforeDiscount >= minOrderValue ? 0 : "+"+ formatVND(parseInt(bill?.shipMoney) || 0)}
          </Flex>

          {discountCode && (
            <Flex justify="space-between">
              <Col>
                <LuTicket size={27} style={{ color: `${COLORS.primary}` }} />
                Voucher: {appliedDiscount===""?voucher[0]?.note:appliedDiscount} 
              </Col>
              - {discount?.toLocaleString("vi-VN")} ƒë
              </Flex>
          )}
          <Divider />
          <h3 style={{ textAlign: "right" }}>
            T·ªïng h√≥a ƒë∆°n: {totalAmount?.toLocaleString()} ‚Ç´
          </h3>
          <Divider />
          <Row>
            <Col>
            <Content
                title="M√£ ∆∞u ƒë√£i"
                style={{
                  marginTop: "1rem",
                }}
              >
                <Row gutter={1} justify={"space-between"}>
                  <Col>
                    {" "}
                    <LuTicket
                      size={29}
                      style={{ color: `${COLORS.primary}` }}
                    />
                  </Col>
                  <Col>
                    {" "}
                    <Select
                      showSearch
                      style={{ width: "100%", minWidth: 200 }} // M·ªü r·ªông √¥ ch·ªçn
                      placeholder="Ch·ªçn voucher"
                      optionLabelProp="label"
                      value={discountCode}
                      dropdownStyle={{ width: "auto", minWidth: 400 }} // M·ªü r·ªông dropdown
                      onChange={(value) => {
                        setDiscountCode(value);
                        console.log("diacadiecode", discountCode);
                      }}
                    >
                      {voucherValid?.map((item) => (
                        <Select.Option
                          key={item.id}
                          value={item.id}
                          label={item.voucherCode}
                        >
                          <div
                            style={{
                              display: "flex",
                              alignItems: "center",
                              gap: 10,
                              height: "90px",
                            }}
                          >
                            {/* ·∫¢nh th∆∞∆°ng hi·ªáu */}
                            <div style={{
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              width: '70px',
                              height: '70px',
                              border: '1px solid #ddd',
                              borderRadius: '4px',
                              overflow: 'hidden',
                              backgroundColor: "#e74c3c"

                            }}>
                              <img
                                src={
                                  item.image ||
                                  "https://down-vn.img.susercontent.com/file/vn-11134004-7ras8-m4re2imocx9s72.webp"
                                }
                                alt={item.voucherCode}
                                style={{ width: "70px" }}
                              />
                            </div>

                            {/* Th√¥ng tin voucher */}
                            <div>
                              <strong>{item.voucherCode}</strong>
                              <span
                                style={{
                                  margin: 0,
                                  fontSize: 12,
                                  color: "#888",
                                }}
                              >
                                - Gi·∫£m{" "}
                                {item.discountType === "MONEY"
                                  ? item.discountValue.toLocaleString() + "ƒë"
                                  : item.discountValue + "%"}{" "}
                                {item.discountType === "MONEY"
                                  ? ""
                                  : `T·ªëi ƒëa ${item.discountMaxValue.toLocaleString()}ƒë`}
                              </span>
                              <div>
                                <Text type="success">
                                  ƒê∆°n t·ªëi thi·ªÉu{" "}
                                  {item.billMinValue.toLocaleString()} ƒë
                                </Text>
                              </div>
                              <span>{item.endDate}</span>
                              <div>
                                <Text type="danger">
                                  {item.voucherType=="PRIVATE"? "S·ªë l∆∞·ª£ng 1": "S·ªë l∆∞·ª£ng "+item.quantity}
                                </Text>
                              </div>
                            </div>
                          </div>
                        </Select.Option>
                      ))}
                    </Select>
                  </Col>

                  <Button type="primary" onClick={applyDiscount}>
                    √Åp d·ª•ng
                  </Button>
                </Row>
                <div>
                  {" "}
                  <Text type="success" className="pt-10">
                    {voucherBests.note}
                  </Text>
                </div>
              </Content>
            </Col>
          </Row>
          <Radio.Group
            onChange={handlePaymentMethodChange}
            value={paymentMethod}
          >
            <div>
              <Radio value="ZALO_PAY">ZaloPay</Radio>
              <Paragraph type="secondary">
                Th·ª±c hi·ªán thanh to√°n b·∫±ng ·ª©ng d·ª•ng zalo pay.
              </Paragraph>
            </div>
      
            <div>
              <Radio value="COD">Thanh to√°n khi nh·∫≠n h√†ng (COD)</Radio>
            </div>
          </Radio.Group>
          <Button type="primary" block onClick={handleSubmit(handleFormSubmit)}>
            ƒê·∫∂T H√ÄNG
          </Button>
          <Paragraph type="secondary">
            Th√¥ng tin c√° nh√¢n c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x·ª≠ l√Ω ƒë∆°n h√†ng v√† tƒÉng
            tr·∫£i nghi·ªám s·ª≠ d·ª•ng website. khi ·∫•n ƒë·∫∑t h√†ng ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£
            ƒë·ªìng √Ω v·ªõi <a style={{ color: "blue" }}> Ch√≠nh s√°ch mua h√†ng </a>
            c·ªßa c·ª≠a h√†ng
          </Paragraph>
        </Col>
      </Row>
    </Content>
  );
};

export default PayMent;

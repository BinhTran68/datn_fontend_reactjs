// import React, { useState } from 'react';
// import styles from './CartPage.module.css';

// const CartPage = () => {
//   const [quantity, setQuantity] = useState(1);
//   const [isCheckoutModalVisible, setIsCheckoutModalVisible] = useState(false);
//   const [isPaymentStep, setIsPaymentStep] = useState(false);
//   const [customerInfo, setCustomerInfo] = useState({
//     gender: 'Anh',
//     name: '',
//     phone: '',
//     email: '',
//     address: '',
//     deliveryOption: 'Giao h√†ng t·∫≠n nh√†',
//     note: '',
//   });

//   // D·ªØ li·ªáu s·∫£n ph·∫©m
//   const product = {
//     name: 'Gi√†y Adidas Stan Smith Fairway M20324 - 36',
//     price: 2100000,
//     image: 'https://authentic-shoes.com/wp-content/uploads/2023/04/8880_01.jpg_c2f0a7080647417eb4a17324fed9919f-768x343.jpeg'
//   };

//   const totalPrice = product.price * quantity;

//   const paymentMethods = [
//     {
//       id: 'vietqr',
//       name: 'Qu√©t m√£ chuy·ªÉn kho·∫£n VietQR',
//       description: 'Ghi nh·∫≠n giao d·ªãch t·ª©c th√¨. QR ƒë∆∞·ª£c ch·∫•p nh·∫≠n b·ªüi 40+ Ng√¢n h√†ng v√† 4 V√≠ ƒëi·ªán t·ª≠.',
//       icon: 'üí≥'
//     },
//     {
//       id: 'atm',
//       name: 'Th·∫ª ATM',
//       description: '',
//       icon: 'üèß'
//     },
//     {
//       id: 'credit',
//       name: 'Th·∫ª Visa, MasterCard, JCB',
//       description: '',
//       icon: 'üí≥'
//     },
//     {
//       id: 'cod',
//       name: 'Giao h√†ng thu ti·ªÅn (COD)',
//       description: '',
//       icon: 'üöö'
//     },
//     {
//       id: 'bank',
//       name: 'T√†i kho·∫£n ng√¢n h√†ng',
//       description: 'Ch·∫•p nh·∫≠n b·ªüi MB Bank, PVcom Bank',
//       icon: 'üè¶'
//     }
//   ];

//   const increaseQuantity = () => setQuantity(quantity + 1);
//   const decreaseQuantity = () => {
//     if (quantity > 1) setQuantity(quantity - 1);
//   };

//   const handleButtonClick = (message) => {
//     alert(message);
//   };

//   const handleBuyNowClick = () => {
//     setIsCheckoutModalVisible(true);
//     setIsPaymentStep(false);
//   };

//   const handleCloseCheckoutModal = () => {
//     setIsCheckoutModalVisible(false);
//     setIsPaymentStep(false);
//   };

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setCustomerInfo(prevState => ({
//       ...prevState,
//       [name]: value,
//     }));
//   };

//   const handleDeliveryOptionChange = (e) => {
//     setCustomerInfo(prevState => ({
//       ...prevState,
//       deliveryOption: e.target.value,
//     }));
//   };

//   const handleSubmit = () => {
//     // Validate form
//     if (!customerInfo.name || !customerInfo.phone || !customerInfo.email || 
//         (customerInfo.deliveryOption === 'Giao h√†ng t·∫≠n nh√†' && !customerInfo.address)) {
//       alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
//       return;
//     }
//     setIsPaymentStep(true);
//   };

//   const handleBackToInfo = () => {
//     setIsPaymentStep(false);
//   };

//   return (
//     <div>
//       <h2>Cart</h2>
//       <div className="">
//         <div className="row">
//           <div className="col-md-8">
//             <div className={`row container-fluid text-center`}>
//               <div className="col-2">S·∫¢N PH·∫®M</div>
//               <div className="col-1"></div>
//               <div className="col-3"></div>
//               <div className="col-2">GI√Å</div>
//               <div className="col-2">S·ªê L∆Ø·ª¢NG</div>
//               <div className="col-2">T·∫†M T√çNH</div>
//             </div><hr />
//             <div className="row align-items-center">
//               <div className="col-2">
//                 <img src={product.image} alt={product.name} width="60" />
//               </div>
//               <div className="col-4">
//                 <p>{product.name}</p>
//               </div>
//               <div className="col-2">
//                 <strong>{product.price.toLocaleString()} ƒë</strong>
//               </div>
//               <div className="col-2 d-flex align-items-center">
//                 <button onClick={decreaseQuantity} className="btn btn-sm btn-outline-secondary">-</button>
//                 <input type="text" value={quantity} readOnly className="form-control text-center mx-2" style={{ width: '40px' }} />
//                 <button onClick={increaseQuantity} className="btn btn-sm btn-outline-secondary">+</button>
//               </div>
//               <div className="col-2">
//                 <strong>{totalPrice.toLocaleString()} ƒë</strong>
//               </div>
//             </div>
//             <hr />
//             <a href="#" className={styles.button}>‚Üê TI·∫æP T·ª§C XEM S·∫¢N PH·∫®M</a>
//           </div>

//           <div className="col-md-4">
//             <div>
//               <h4>C·ªông gi·ªè h√†ng</h4>
//             </div><hr />
//             <div>T·∫°m t√≠nh: {totalPrice.toLocaleString()} ƒë</div><hr />
//             <div>T·ªïng: {totalPrice.toLocaleString()} ƒë</div><hr />

//             <div className={styles.buttonContainer}>
//               <button
//                 className={`${styles.button} ${styles.buttonRed} col-4 mb-2`}
//                 onClick={handleBuyNowClick}
//               >MUA NGAY</button>
//               <button
//                 className={`${styles.button} ${styles.buttonBlue} col-4 mb-2`}
//                 onClick={() => handleButtonClick('Ch·ªçn tr·∫£ g√≥p qua th·∫ª!')}
//               >TR·∫¢ G√ìP QUA TH·∫∫</button>
//               <button
//                 className={`${styles.button} ${styles.buttonYellow} col-4 mb-2`}
//                 onClick={() => handleButtonClick('Mua ngay - Tr·∫£ sau th√†nh c√¥ng!')}
//               >MUA NGAY - TR·∫¢ SAU</button>
//             </div>
//             <button
//               className={`${styles.checkoutButton} col-12`}
//               onClick={() => handleButtonClick('Ti·∫øn h√†nh thanh to√°n!')}
//             >TI·∫æN H√ÄNH THANH TO√ÅN</button>
//             <br />

//             <div className={styles.discountCodeSection}>
//               <label htmlFor="discount-code" className={styles.discountCodeLabel}>M√£ ∆∞u ƒë√£i</label><hr /><br />
//               <input type="text" id="discount-code" className={styles.discountCodeInput} placeholder="M√£ ∆∞u ƒë√£i" />
//               <button
//                 className={`${styles.buttond} col-12`}
//                 onClick={() => handleButtonClick('√Åp d·ª•ng m√£ ∆∞u ƒë√£i!')}
//               >√Åp d·ª•ng</button>
//             </div>
//           </div>
//         </div>
//       </div>

//       {isCheckoutModalVisible && (
//         <div className={`${styles.modalOverlay} ${isCheckoutModalVisible ? styles.modalOverlayShow : ''}`}>
//           <div className={`${styles.modalContent} ${isCheckoutModalVisible ? styles.modalContentShow : ''}`}>
//             <div className={styles.modalHeader}>
//               <h3>{isPaymentStep ? 'Ch·ªçn h√¨nh th·ª©c thanh to√°n' : 'Th√¥ng tin thanh to√°n'}</h3>
//               <span className={styles.closeButton} onClick={handleCloseCheckoutModal}>&times;</span>
//             </div>
            
//             {!isPaymentStep ? (
//               // Form th√¥ng tin kh√°ch h√†ng
//               <div className={styles.modalBody}>
//                 <div className="row mb-3 align-items-center">
//                   <div className="col-2">
//                     <img src={product.image} alt={product.name} width="60" />
//                   </div>
//                   <div className="col-8">
//                     <p className="mb-0">{product.name}</p>
//                     <p className="mb-0">S·ªë l∆∞·ª£ng: {quantity}</p>
//                     <p className="mb-0">Gi√°: {totalPrice.toLocaleString()} ƒë</p>
//                   </div>
//                 </div>
//                 <hr />
//                 <h4>Th√¥ng tin kh√°ch h√†ng</h4>
//                 <div className="mb-3">
//                   <label className="me-3">
//                     <input
//                       type="radio"
//                       name="gender"
//                       value="Anh"
//                       checked={customerInfo.gender === 'Anh'}
//                       onChange={handleChange}
//                     />{' '}
//                     Anh
//                   </label>
//                   <label>
//                     <input
//                       type="radio"
//                       name="gender"
//                       value="Ch·ªã"
//                       checked={customerInfo.gender === 'Ch·ªã'}
//                       onChange={handleChange}
//                     />{' '}
//                     Ch·ªã
//                   </label>
//                 </div>
//                 <div className="mb-3">
//                   <label htmlFor="name" className="form-label">H·ªç v√† t√™n*</label>
//                   <input
//                     type="text"
//                     className="form-control"
//                     id="name"
//                     name="name"
//                     value={customerInfo.name}
//                     onChange={handleChange}
//                     required
//                   />
//                 </div>
//                 <div className="mb-3">
//                   <label htmlFor="phone" className="form-label">S·ªë ƒëi·ªán tho·∫°i*</label>
//                   <input
//                     type="tel"
//                     className="form-control"
//                     id="phone"
//                     name="phone"
//                     value={customerInfo.phone}
//                     onChange={handleChange}
//                     required
//                   />
//                 </div>
//                 <div className="mb-3">
//                   <label htmlFor="email" className="form-label">Email*</label>
//                   <input
//                     type="email"
//                     className="form-control"
//                     id="email"
//                     name="email"
//                     value={customerInfo.email}
//                     onChange={handleChange}
//                     required
//                   />
//                 </div>
//                 <div className="alert alert-info" role="alert">
//                   <i className="bi bi-envelope-fill me-2"></i> Th√¥ng tin ƒë∆°n h√†ng s·∫Ω ƒë∆∞·ª£c g·ª≠i qua email. Nh√† cung c·∫•p s·∫Ω li√™n h·ªá v·ªõi b·∫°n qua s·ªë ƒëi·ªán tho·∫°i.
//                 </div>
//                 <hr />
//                 <h4>Y√™u c·∫ßu nh·∫≠n h√†ng</h4>
//                 <div className="mb-3">
//                   <label className="me-3">
//                     <input
//                       type="radio"
//                       name="deliveryOption"
//                       value="Giao h√†ng t·∫≠n nh√†"
//                       checked={customerInfo.deliveryOption === 'Giao h√†ng t·∫≠n nh√†'}
//                       onChange={handleDeliveryOptionChange}
//                     />{' '}
//                     Giao h√†ng t·∫≠n nh√†
//                   </label>
//                   <label>
//                     <input
//                       type="radio"
//                       name="deliveryOption"
//                       value="Nh·∫≠n t·∫°i c·ª≠a h√†ng"
//                       checked={customerInfo.deliveryOption === 'Nh·∫≠n t·∫°i c·ª≠a h√†ng'}
//                       onChange={handleDeliveryOptionChange}
//                     />{' '}
//                     Nh·∫≠n t·∫°i c·ª≠a h√†ng
//                   </label>
//                 </div>
//                 {customerInfo.deliveryOption === 'Giao h√†ng t·∫≠n nh√†' && (
//                   <div className="mb-3">
//                     <label htmlFor="address" className="form-label">ƒê·ªãa ch·ªâ nh·∫≠n h√†ng*</label>
//                     <input
//                       type="text"
//                       className="form-control"
//                       id="address"
//                       name="address"
//                       value={customerInfo.address}
//                       onChange={handleChange}
//                       required
//                     />
//                   </div>
//                 )}
//                 <div className="mb-3">
//                   <label htmlFor="note" className="form-label">Ghi ch√∫ cho ng∆∞·ªùi b√°n</label>
//                   <textarea
//                     className="form-control"
//                     id="note"
//                     name="note"
//                     value={customerInfo.note}
//                     onChange={handleChange}
//                   ></textarea>
//                 </div>
//               </div>
//             ) : (
//               // Trang ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
//               <div className={styles.modalBody}>
//                 <button onClick={handleBackToInfo} className="btn btn-link mb-4">
//                   ‚Üê Quay l·∫°i
//                 </button>

//                 <div className="bg-light p-3 rounded mb-4">
//                   <p className="mb-1">M√£ ƒë∆°n h√†ng: SLSEXW10</p>
//                   <p className="mb-1">Ng∆∞·ªùi nh·∫≠n h√†ng: {customerInfo.gender} {customerInfo.name}, {customerInfo.phone}</p>
//                   <p className="mb-0">ƒê·ªãa ch·ªâ nh·∫≠n h√†ng: {customerInfo.address || 'Nh·∫≠n t·∫°i c·ª≠a h√†ng'}</p>
//                 </div>

//                 <div className="payment-methods">
//                   {paymentMethods.map((method) => (
//                     <div
//                       key={method.id}
//                       className="border rounded p-3 mb-3 cursor-pointer hover:border-primary"
//                       onClick={() => handleButtonClick(`ƒê√£ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n: ${method.name}`)}
//                     >
//                       <div className="d-flex align-items-center">
//                         <span className="me-3 fs-4">{method.icon}</span>
//                         <div>
//                           <h5 className="mb-1">{method.name}</h5>
//                           {method.description && (
//                             <p className="mb-0 small text-muted">{method.description}</p>
//                           )}
//                         </div>
//                       </div>
//                     </div>
//                   ))}
//                 </div>

//                 <div className="mt-4 pt-3 border-top">
//                   <div className="d-flex justify-content-between align-items-center">
//                     <div className="small">
//                     <a href="#" className="text-decoration-none me-3">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a>
//                       <a href="#" className="text-decoration-none me-3">C√¢u h·ªèi th∆∞·ªùng g·∫∑p</a>
//                       <a href="#" className="text-decoration-none">Ch√≠nh s√°ch b·∫£o m·∫≠t</a>
//                     </div>
//                     <button className="btn btn-success">
//                       H·ªó tr·ª£ tr·ª±c tuy·∫øn
//                     </button>
//                   </div>
//                 </div>
//               </div>
//             )}

//             <div className={styles.modalFooter}>
//               {!isPaymentStep ? (
//                 <button className="btn btn-primary" onClick={handleSubmit}>Ti·∫øp t·ª•c</button>
//               ) : null}
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default CartPage;



    




import React, { useState, useEffect } from 'react';
import { Steps, Button, Radio, Form, Input, Select, Alert, Divider } from 'antd';
import styles from './CartPage.module.css';

const CartPage = () => {
  // ----------------------------
  // 1. C√°c state ch√≠nh
  // ----------------------------
  const [isCheckoutModalVisible, setIsCheckoutModalVisible] = useState(false);
  const [current, setCurrent] = useState(0);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(null);
  const [customerInfo, setCustomerInfo] = useState({
    gender: 'Anh',
    name: '',
    phone: '',
    email: '',
    province: null,
    district: null, // new state for district
    ward: null, // new state for ward
    deliveryOption: 'Giao h√†ng t·∫≠n nh√†',
    note: '',
  });
  const [form] = Form.useForm();
  const [discountCode, setDiscountCode] = useState('');
  const [discountValue, setDiscountValue] = useState(0);
  const [cartItems, setCartItems] = useState([
    {
      id: 1,
      name: 'Gi√†y Adidas Stan Smith Fairway M20324 - 36',
      price: 2100000,
      quantity: 1,
      image:
        'https://authentic-shoes.com/wp-content/uploads/2023/04/8880_01.jpg_c2f0a7080647417eb4a17324fed9919f-768x343.jpeg',
    },
    {
      id: 2,
      name: 'Gi√†y Nike Wmns Air Jordan 1 Low ‚ÄòWhite Wolf Grey‚Äô DC0774-105',
      price: 2500000,
      quantity: 2,
      image:
        'https://authentic-shoes.com/wp-content/uploads/2023/04/776547_01.jpg_79fdea599edb49e4ace83698f93f26e1-768x386.jpeg',
    },
  ]);
  const paymentMethods = [
    {
      id: 'momo',
      name: 'Thanh to√°n qua Momo',
      description: 'Thanh to√°n nhanh qua v√≠ Momo',
      icon: 'https://cdn.30shine.com/Icons/Payment/momo.png',
    },
    {
      id: 'zalopay',
      name: 'Thanh to√°n qua ZaloPay',
      description: 'Thanh to√°n nhanh qua ZaloPay',
      icon: 'https://cdn.30shine.com/Icons/Payment/zalopay.png',
    },
    {
      id: 'vietqr',
      name: 'Qu√©t m√£ VietQR',
      description: 'Ghi nh·∫≠n giao d·ªãch t·ª©c th√¨. H·ªó tr·ª£ 40+ ng√¢n h√†ng.',
      icon: 'üí≥',
    },
    {
      id: 'mbbank',
      name: 'Chuy·ªÉn kho·∫£n MB Bank',
      description: 'Chuy·ªÉn kho·∫£n th·ªß c√¥ng t·ªõi MB Bank',
      icon: 'üè¶',
    },
    {
      id: 'cod',
      name: 'Thanh to√°n khi nh·∫≠n h√†ng (COD)',
      description: 'Thanh to√°n khi nh·∫≠n h√†ng',
      icon: 'üöö',
    },
  ];
  const [provinces, setProvinces] = useState([]);
  const [districts, setDistricts] = useState([]); // new state for districts
  const [wards, setWards] = useState([]); // new state for wards
  const [loadingProvinces, setLoadingProvinces] = useState(false);
  const [loadingDistricts, setLoadingDistricts] = useState(false); // loading districts state
  const [loadingWards, setLoadingWards] = useState(false); // loading wards state


  // ----------------------------
  // 2. Fetch API data
  // ----------------------------
  useEffect(() => {
    const fetchProvinces = async () => {
      setLoadingProvinces(true);
      try {
        const response = await fetch('https://provinces.open-api.vn/api/?depth=1');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setProvinces(data);
      } catch (error) {
        console.error("Could not fetch provinces:", error);
      } finally {
        setLoadingProvinces(false);
      }
    };

    fetchProvinces();
  }, []);

  useEffect(() => {
    const fetchDistricts = async () => {
      if (!customerInfo.province) {
        setDistricts([]);
        return;
      }
      setLoadingDistricts(true);
      try {
        // Find the selected province object
        const selectedProvince = provinces.find(p => p.name === customerInfo.province);
        if (!selectedProvince) {
          setDistricts([]);
          return;
        }
        const response = await fetch(`https://provinces.open-api.vn/api/p/${selectedProvince.code}?depth=2`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setDistricts(data.districts);
      } catch (error) {
        console.error("Could not fetch districts:", error);
      } finally {
        setLoadingDistricts(false);
      }
    };

    fetchDistricts();
  }, [customerInfo.province, provinces]); // Refetch districts when province changes

  useEffect(() => {
    const fetchWards = async () => {
      if (!customerInfo.district) {
        setWards([]);
        return;
      }
      setLoadingWards(true);
      try {
        // Find the selected district object
        const selectedDistrict = districts.find(d => d.name === customerInfo.district);
        if (!selectedDistrict) {
          setWards([]);
          return;
        }
        const response = await fetch(`https://provinces.open-api.vn/api/d/${selectedDistrict.code}?depth=2`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setWards(data.wards);
      } catch (error) {
        console.error("Could not fetch wards:", error);
      } finally {
        setLoadingWards(false);
      }
    };

    fetchWards();
  }, [customerInfo.district, districts]); // Refetch wards when district changes


  // ----------------------------
  // 3. T√≠nh to√°n ti·ªÅn
  // ----------------------------
  const productTotal = cartItems.reduce(
    (acc, item) => acc + item.price * item.quantity,
    0
  );

  const shippingFee =
    customerInfo.deliveryOption === 'Giao h√†ng t·∫≠n nh√†' ? 30000 : 0;

  const finalTotal = productTotal + shippingFee - discountValue;

  // ----------------------------
  // 4. X·ª≠ l√Ω s·ª± ki·ªán
  // ----------------------------
  // TƒÉng/gi·∫£m s·ªë l∆∞·ª£ng t·ª´ng s·∫£n ph·∫©m
  const handleIncreaseQuantity = (itemId) => {
    setCartItems((prev) =>
      prev.map((item) =>
        item.id === itemId
          ? { ...item, quantity: item.quantity + 1 }
          : item
      )
    );
  };

  const handleDecreaseQuantity = (itemId) => {
    setCartItems((prev) =>
      prev.map((item) =>
        item.id === itemId && item.quantity > 1
          ? { ...item, quantity: item.quantity - 1 }
          : item
      )
    );
  };

  // Xo√° m·ªôt s·∫£n ph·∫©m kh·ªèi gi·ªè
  const handleRemoveItem = (itemId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè?')) {
      setCartItems((prev) => prev.filter((item) => item.id !== itemId));
    }
  };

  // Khi nh·∫•n MUA NGAY
  const handleBuyNowClick = () => {
    if (cartItems.length === 0) {
      alert('Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ MUA NGAY!');
      return;
    }
    setIsCheckoutModalVisible(true);
    setCurrent(0);
    setSelectedPaymentMethod(null);

    // ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho form
    form.setFieldsValue({
      gender: customerInfo.gender,
      name: customerInfo.name,
      phone: customerInfo.phone,
      email: customerInfo.email,
      province: customerInfo.province,
      district: customerInfo.district, // set district default value
      ward: customerInfo.ward, // set ward default value
      deliveryOption: customerInfo.deliveryOption,
      note: customerInfo.note,
    });
  };

  // ƒê√≥ng modal
  const handleCloseCheckoutModal = () => {
    setIsCheckoutModalVisible(false);
    setCurrent(0);
    setSelectedPaymentMethod(null);
  };

  // Form thay ƒë·ªïi th√¥ng tin
  const handleChange = (e) => {
    const { name, value } = e.target;
    setCustomerInfo((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // Chuy·ªÉn gi·ªØa giao h√†ng / nh·∫≠n t·∫°i shop
  const handleDeliveryOptionChange = (e) => {
    setCustomerInfo((prev) => ({
      ...prev,
      deliveryOption: e.target.value,
    }));
  };

  const handleProvinceChange = (value) => {
    setCustomerInfo(prev => ({ ...prev, province: value, district: null, ward: null })); // Reset district and ward when province changes
    form.setFieldsValue({ district: null, ward: null }); // Clear district and ward fields in form
  };

  const handleDistrictChange = (value) => {
    setCustomerInfo(prev => ({ ...prev, district: value, ward: null })); // Reset ward when district changes
    form.setFieldsValue({ ward: null }); // Clear ward field in form
  };


  const handleWardChange = (value) => {
    setCustomerInfo(prev => ({ ...prev, ward: value }));
  };

  // B∆∞·ªõc 1 -> B∆∞·ªõc 2
  const handleSubmitCheckoutInfo = () => {
    form.validateFields()
      .then(values => {
        // C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
        setCustomerInfo({
          ...customerInfo,
          ...values
        });
        // Ti·∫øn ƒë·∫øn b∆∞·ªõc ti·∫øp theo
        setCurrent(1);
      })
      .catch(errorInfo => {
        console.log('Validate Failed:', errorInfo);
      });
  };

  // B∆∞·ªõc 2: Ch·ªçn ph∆∞∆°ng th·ª©c -> sang B∆∞·ªõc 3
  const handlePaymentMethodSelect = (method) => {
    setSelectedPaymentMethod(method);
    setCurrent(2);
  };

  // Quay l·∫°i b∆∞·ªõc tr∆∞·ªõc
  const handlePrev = () => {
    setCurrent(current - 1);
  };

  // X√°c nh·∫≠n thanh to√°n (b∆∞·ªõc 3)
  const handleConfirmPayment = () => {
    if (!selectedPaymentMethod) {
      alert('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!');
      return;
    }
    alert(
      `B·∫°n ƒë√£ ch·ªçn thanh to√°n qua: ${selectedPaymentMethod.name}.\nT·ªïng thanh to√°n: ${finalTotal.toLocaleString()} ƒë.`
    );
    // G·ªçi API, x·ª≠ l√Ω ƒë∆°n h√†ng, vv...
    handleCloseCheckoutModal();
  };

  // √Åp d·ª•ng m√£ gi·∫£m gi√° (gi·∫£ l·∫≠p)
  const handleApplyDiscountCode = () => {
    const code = discountCode.trim().toUpperCase();
    if (!code) {
      alert('B·∫°n ch∆∞a nh·∫≠p m√£ ∆∞u ƒë√£i!');
      return;
    }
    // V√≠ d·ª• m·ªôt s·ªë m√£ demo
    if (code === 'AUTHENTIC') {
      // M√£ "AUTHENTIC" => gi·∫£m 5% tr√™n productTotal
      const discountAmount = productTotal * 0.05;
      setDiscountValue(discountAmount);
      alert(
        `√Åp d·ª•ng m√£ "AUTHENTIC" ‚Äì gi·∫£m ${discountAmount.toLocaleString()} ƒë!`
      );
    } else if (code === 'FREESHIP') {
      if (shippingFee > 0) {
        setDiscountValue(shippingFee);
        alert('√Åp d·ª•ng m√£ "FREESHIP" ‚Äì gi·∫£m 30.000 ƒë ph√≠ ship!');
      } else {
        alert(
          'M√£ "FREESHIP" ch·ªâ √°p d·ª•ng khi ch·ªçn Giao h√†ng t·∫≠n nh√†!'
        );
      }
    } else if (code === 'GIAM50K') {
      const discountAmount = 50000;
      setDiscountValue(discountAmount);
      alert('√Åp d·ª•ng m√£ "GIAM50K" ‚Äì gi·∫£m 50.000 ƒë!');
    } else {
      alert('M√£ ∆∞u ƒë√£i kh√¥ng h·ª£p l·ªá!');
    }
  };

  // C√°c b∆∞·ªõc trong quy tr√¨nh thanh to√°n
  const steps = [
    {
      title: 'Th√¥ng tin',
      content: (
        <Form
          form={form}
          layout="vertical"
          initialValues={{
            gender: customerInfo.gender,
            name: customerInfo.name,
            phone: customerInfo.phone,
            email: customerInfo.email,
            province: customerInfo.province,
            district: customerInfo.district,
            ward: customerInfo.ward,
            deliveryOption: customerInfo.deliveryOption,
            note: customerInfo.note,
          }}
        >
          {/* T√≥m t·∫Øt gi·ªè h√†ng */}
          <h5>Gi·ªè h√†ng ({cartItems.length} s·∫£n ph·∫©m)</h5>
          <ul>
            {cartItems.map((item) => (
              <li key={item.id}>
                {item.name} √ó {item.quantity} ={' '}
                {(item.price * item.quantity).toLocaleString()} ƒë
              </li>
            ))}
          </ul>
          <p>
            T·∫°m t√≠nh: {productTotal.toLocaleString()} ƒë,
            Ph√≠ ship: {shippingFee.toLocaleString()} ƒë,
            Gi·∫£m gi√°: {discountValue.toLocaleString()} ƒë
          </p>
          <Divider />
          <h4>Th√¥ng tin kh√°ch h√†ng</h4>

          <Form.Item name="gender" label="Gi·ªõi t√≠nh">
            <Radio.Group>
              <Radio value="Anh">Anh</Radio>
              <Radio value="Ch·ªã">Ch·ªã</Radio>
            </Radio.Group>
          </Form.Item>

          <Form.Item
            name="name"
            label="H·ªç v√† T√™n"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç t√™n!' }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="phone"
            label="S·ªë ƒëi·ªán tho·∫°i"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!' }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="email"
            label="Email"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p email!' },
              { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá!' }
            ]}
          >
            <Input />
          </Form.Item>

          <Alert
            message="Th√¥ng tin ƒë∆°n h√†ng s·∫Ω g·ª≠i qua email; ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i qua s·ªë ƒëi·ªán tho·∫°i."
            type="info"
            showIcon
            style={{ marginBottom: '20px' }}
          />

          <Divider />
          <h4>Y√™u c·∫ßu nh·∫≠n h√†ng</h4>

          <Form.Item name="deliveryOption" label="H√¨nh th·ª©c nh·∫≠n h√†ng">
            <Radio.Group onChange={(e) => setCustomerInfo(prev => ({ ...prev, deliveryOption: e.target.value }))}>
              <Radio value="Giao h√†ng t·∫≠n nh√†">Giao h√†ng t·∫≠n nh√†</Radio>
              <Radio value="Nh·∫≠n t·∫°i c·ª≠a h√†ng">Nh·∫≠n t·∫°i c·ª≠a h√†ng</Radio>
            </Radio.Group>
          </Form.Item>

          {form.getFieldValue('deliveryOption') === 'Giao h√†ng t·∫≠n nh√†' && (
            <>
              <Form.Item
                name="province"
                label="T·ªânh/Th√†nh ph·ªë"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn T·ªânh/Th√†nh ph·ªë!' }]}
              >
                <Select
                  placeholder="Ch·ªçn T·ªânh/Th√†nh ph·ªë"
                  loading={loadingProvinces}
                  onChange={handleProvinceChange}
                >
                  {provinces.map(province => (
                    <Select.Option key={province.code} value={province.name}>
                      {province.name}
                    </Select.Option>
                  ))}
                </Select>
              </Form.Item>

              <Form.Item
                name="district"
                label="Qu·∫≠n/Huy·ªán"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn Qu·∫≠n/Huy·ªán!' }]}
                >
                <Select
                  placeholder="Ch·ªçn Qu·∫≠n/Huy·ªán"
                  loading={loadingDistricts}
                  onChange={handleDistrictChange}
                  disabled={!customerInfo.province} // Disable if no province selected
                >
                  {districts.map(district => (
                    <Select.Option key={district.code} value={district.name}>
                      {district.name}
                    </Select.Option>
                  ))}
                </Select>
              </Form.Item>

              <Form.Item
                name="ward"
                label="Ph∆∞·ªùng/X√£"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn Ph∆∞·ªùng/X√£!' }]}
              >
                <Select
                  placeholder="Ch·ªçn Ph∆∞·ªùng/X√£"
                  loading={loadingWards}
                  onChange={handleWardChange}
                  disabled={!customerInfo.district} // Disable if no district selected
                >
                  {wards.map(ward => (
                    <Select.Option key={ward.code} value={ward.name}>
                      {ward.name}
                    </Select.Option>
                  ))}
                </Select>
              </Form.Item>
            </>
          )}

          <Form.Item name="note" label="Ghi ch√∫">
            <Input.TextArea rows={4} />
          </Form.Item>
        </Form>
      ),
    },
    {
      title: 'Thanh to√°n',
      content: (
        <div>
          <div className="bg-light p-3 rounded mb-3">
            <p className="mb-1">Gi·ªè h√†ng: {cartItems.length} s·∫£n ph·∫©m</p>
            <p className="mb-1">
              Ng∆∞·ªùi nh·∫≠n: {customerInfo.gender} {customerInfo.name},{' '}
              {customerInfo.phone}
            </p>
            <p className="mb-0">
              {customerInfo.deliveryOption === 'Nh·∫≠n t·∫°i c·ª≠a h√†ng'
                ? 'Nh·∫≠n t·∫°i c·ª≠a h√†ng'
                : `ƒê·ªãa ch·ªâ: ${customerInfo.ward}, ${customerInfo.district}, ${customerInfo.province}`} {/* Show full address */}
            </p>
            <p style={{ marginTop: '8px' }}>
              T·∫°m t√≠nh: {productTotal.toLocaleString()} ƒë
              <br />
              Ph√≠ ship: {shippingFee.toLocaleString()} ƒë
              <br />
              Gi·∫£m gi√°: {discountValue.toLocaleString()} ƒë
              <br />
              <strong>
                T·ªïng: {finalTotal.toLocaleString()} ƒë
              </strong>
            </p>
          </div>
          <h5>Vui l√≤ng ch·ªçn m·ªôt ph∆∞∆°ng th·ª©c thanh to√°n:</h5>

          {paymentMethods.map((method) => (
            <div
              key={method.id}
              className={`border rounded p-3 mb-3 ${selectedPaymentMethod?.id === method.id ? 'border-primary' : ''}`}
              style={{ cursor: 'pointer' }}
              onClick={() => handlePaymentMethodSelect(method)}
            >
              {method.icon.startsWith('http') ? (
                <img
                  src={method.icon}
                  alt={method.name}
                  width="40"
                  className="me-3"
                />
              ) : (
                <span className="me-3 fs-4">{method.icon}</span>
              )}
              <strong>{method.name}</strong> ‚Äì{' '}
              <em>{method.description}</em>
            </div>
          ))}
        </div>
      ),
    },
    {
      title: 'X√°c nh·∫≠n',
      content: (
        <div>
          <div className="bg-light p-3 rounded mb-3">
            <p className="mb-1">M√£ ƒë∆°n h√†ng: SLSEXW10</p>
            <p className="mb-1">
              Ng∆∞·ªùi nh·∫≠n: {customerInfo.gender} {customerInfo.name},{' '}
              {customerInfo.phone}
            </p>
            <p className="mb-0">
              {customerInfo.deliveryOption === 'Nh·∫≠n t·∫°i c·ª≠a h√†ng'
                ? 'Nh·∫≠n t·∫°i c·ª≠a h√†ng'
                : `ƒê·ªãa ch·ªâ: ${customerInfo.ward}, ${customerInfo.district}, ${customerInfo.province}`} {/* Show full address */}
            </p>
            <p style={{ marginTop: '8px' }}>
              Ph√≠ ship: {shippingFee.toLocaleString()} ƒë
              <br />
              Gi·∫£m gi√°: {discountValue.toLocaleString()} ƒë
              <br />
              <strong>
                T·ªïng thanh to√°n: {finalTotal.toLocaleString()} ƒë
              </strong>
            </p>
          </div>

          <h4>Thanh to√°n qua {selectedPaymentMethod?.name}</h4>

          {selectedPaymentMethod?.id === 'momo' && (
            <div>
              <p>Vui l√≤ng m·ªü ·ª©ng d·ª•ng Momo, qu√©t m√£ ho·∫∑c nh·∫≠p SƒêT ƒë·ªÉ chuy·ªÉn ti·ªÅn...</p>
              <img
                src="https://static.mservice.io/img/logo-momo.png"
                alt="Momo"
                width="100"
              />
            </div>
          )}
          {selectedPaymentMethod?.id === 'zalopay' && (
            <div>
              <p>Qu√©t m√£ QR ZaloPay ho·∫∑c b·∫•m link thanh to√°n...</p>
              <img
                src="https://cdn.30shine.com/Icons/Payment/zalopay.png"
                alt="ZaloPay"
                width="100"
              />
            </div>
          )}
          {selectedPaymentMethod?.id === 'vietqr' && (
            <div style={{ textAlign: 'center' }}>
              <p>Qu√©t m√£ VietQR d∆∞·ªõi ƒë√¢y, ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi 40+ ng√¢n h√†ng.</p>
              <div
                style={{
                  border: '1px dashed #aaa',
                  padding: '20px',
                  margin: '0 auto',
                  display: 'inline-block',
                }}
              >
                [M√£ QR VietQR gi·∫£ l·∫≠p]
              </div>
            </div>
          )}
          {selectedPaymentMethod?.id === 'mbbank' && (
            <div>
              <p>Chuy·ªÉn kho·∫£n v√†o t√†i kho·∫£n MB Bank:</p>
              <p>
                <strong>STK:</strong> 0123456789
                <br />
                <strong>Ch·ªß t√†i kho·∫£n:</strong> C√îNG TY ABC
              </p>
            </div>
          )}
          {selectedPaymentMethod?.id === 'cod' && (
            <div>
              <p>
                B·∫°n s·∫Ω thanh to√°n khi nh·∫≠n h√†ng (COD). Nh√¢n vi√™n giao
                h√†ng s·∫Ω thu ti·ªÅn m·∫∑t.
              </p>
            </div>
          )}
        </div>
      ),
    },
  ];

  // ----------------------------
  // 5. Render UI
  // ----------------------------
  return (
    <div className="container mt-4">
      <h2>Gi·ªè h√†ng c·ªßa b·∫°n</h2>
      <br />

      {/* Danh s√°ch s·∫£n ph·∫©m */}
      {cartItems.length === 0 ? (
        <p>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!</p>
      ) : (
        <div className="row">
          <div className="col-md-8">
            {/* Header b·∫£ng */}
            <div className="row container-fluid text-center fw-bold">
              <div className="col-2">S·∫£n ph·∫©m</div>
              <div className="col-4"></div>
              <div className="col-2">Gi√°</div>
              <div className="col-2">S·ªë l∆∞·ª£ng</div>
              <div className="col-2">T·∫°m t√≠nh</div>
            </div>
            <hr />

            {/* M·ªói item */}
            {cartItems.map((item) => (
              <div key={item.id}>
                <div className="row align-items-center py-2">
                  <div className="col-2">
                    <img src={item.image} alt={item.name} width="60" />
                  </div>
                  <div className="col-4">
                    <p className="mb-0 fw-semibold">{item.name}</p>
                    <button
                      className="btn btn-sm btn-link text-danger p-0"
                      onClick={() => handleRemoveItem(item.id)}
                    >
                      Xo√°
                    </button>
                  </div>
                  <div className="col-2">
                    <strong>{item.price.toLocaleString()} ƒë</strong>
                  </div>
                  <div className="col-2 d-flex align-items-center">
                    <button
                      onClick={() => handleDecreaseQuantity(item.id)}
                      className="btn btn-sm btn-outline-secondary"
                    >
                      -
                    </button>
                    <input
                      type="text"
                      value={item.quantity}
                      readOnly
                      className="form-control text-center mx-2"
                      style={{ width: '40px' }}
                    />
                    <button
                      onClick={() => handleIncreaseQuantity(item.id)}
                      className="btn btn-sm btn-outline-secondary"
                    >
                      +
                    </button>
                  </div>
                  <div className="col-2">
                    <strong>
                      {(item.price * item.quantity).toLocaleString()} ƒë
                    </strong>
                  </div>
                </div>
                <hr />
              </div>
            ))}

            <a href="#" className={styles.button}>
              ‚Üê Ti·∫øp t·ª•c xem s·∫£n ph·∫©m
            </a>
          </div>

          {/* C·ªôt ph·∫£i: t√≥m t·∫Øt */}
          <div className="col-md-4">
            <h4>C·ªông gi·ªè h√†ng</h4>
            <hr />
            <div className="d-flex justify-content-between">
              <span>T·∫°m t√≠nh s·∫£n ph·∫©m</span>
              <strong>{productTotal.toLocaleString()} ƒë</strong>
            </div>
            <div className="d-flex justify-content-between">
              <span>Ph√≠ ship</span>
              <strong>{shippingFee.toLocaleString()} ƒë</strong>
            </div>
            <div className="d-flex justify-content-between">
              <span>Gi·∫£m gi√°</span>
              <strong>{discountValue.toLocaleString()} ƒë</strong>
            </div>
            <hr />
            <div className="d-flex justify-content-between">
              <strong>T·ªïng thanh to√°n</strong>
              <strong>{finalTotal.toLocaleString()} ƒë</strong>
            </div>
            <hr />

            <div className={styles.buttonContainer}>
              <button
                className={`${styles.button} ${styles.buttonRed} col-4 mb-2`}
                onClick={handleBuyNowClick}
              >
                Mua ngay
              </button>
              <button
                className={`${styles.button} ${styles.buttonBlue} col-4 mb-2`}
                onClick={() => alert('Ch·ªçn tr·∫£ g√≥p qua th·∫ª!')}
              >
                Tr·∫£ g√≥p
              </button>
              <button
                className={`${styles.button} ${styles.buttonYellow} col-4 mb-2`}
                onClick={() => alert('Mua ngay - Tr·∫£ sau!')}
              >
                Tr·∫£ sau
              </button>
            </div>
            <button
              className={`${styles.checkoutButton} col-12`}
              onClick={() => alert('Ti·∫øn h√†nh thanh to√°n!')}
            >
              Ti·∫øn h√†nh thanh to√°n
            </button>
            <br />

            <div className={styles.discountCodeSection}>
              <label
                htmlFor="discount-code"
                className={styles.discountCodeLabel}
              >
                M√£ ∆∞u ƒë√£i
              </label>
              <hr />
              <br />
              <input
                type="text"
                id="discount-code"
                className={styles.discountCodeInput}
                placeholder="Nh·∫≠p m√£ ∆∞u ƒë√£i"
                value={discountCode}
                onChange={(e) => setDiscountCode(e.target.value)}
              />
              <button
                className={`${styles.buttond} col-12`}
                onClick={handleApplyDiscountCode}
              >
                √Åp d·ª•ng
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal checkout v·ªõi Steps c·ªßa Ant Design */}
      {isCheckoutModalVisible && (
        <div className={`${styles.modalOverlay} ${styles.modalOverlayShow}`}>
          <div className={`${styles.modalContent} ${styles.modalContentShow}`} style={{ maxWidth: '800px' }}>
            <div className={styles.modalHeader}>
              <h3>Thanh to√°n ƒë∆°n h√†ng</h3>
              <span className={styles.closeButton} onClick={handleCloseCheckoutModal}>
                &times;
              </span>
            </div>

            <div className={styles.modalBody}>
              {/* Steps c·ªßa Ant Design */}
              <Steps current={current} style={{ marginBottom: '30px' }}>
                <Steps.Step title="Th√¥ng tin ng∆∞·ªùi nh·∫≠n" />
                <Steps.Step title="Ph∆∞∆°ng th·ª©c thanh to√°n" />
                <Steps.Step title="X√°c nh·∫≠n thanh to√°n" />
              </Steps>

              {/* N·ªôi dung c·ªßa t·ª´ng b∆∞·ªõc */}
              <div className="steps-content" style={{ minHeight: '300px' }}>
                {steps[current].content}
              </div>

              {/* C√°c n√∫t ƒëi·ªÅu h∆∞·ªõng */}
              <div className="steps-action" style={{ marginTop: '24px', display: 'flex', justifyContent: 'space-between' }}>
                {current > 0 && (
                  <Button style={{ marginRight: '8px' }} onClick={handlePrev}>
                    Quay l·∫°i
                  </Button>
                )}

                {current === 0 && (
                  <Button type="primary" onClick={handleSubmitCheckoutInfo}>
                    Ti·∫øp t·ª•c
                  </Button>
                )}

                {current === 2 && (
                  <Button type="primary" onClick={handleConfirmPayment}>
                    X√°c nh·∫≠n thanh to√°n
                  </Button>
                )}

                {current === 1 && (
                  <div style={{ textAlign: 'right' }}>
                    <p className="text-muted">Vui l√≤ng ch·ªçn m·ªôt ph∆∞∆°ng th·ª©c thanh to√°n ƒë·ªÉ ti·∫øp t·ª•c</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CartPage;
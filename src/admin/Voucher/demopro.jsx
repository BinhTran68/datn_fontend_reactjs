import {
    Table, Input, Button, Row, Col, Typography, Card, Checkbox, message
} from "antd";
import { SearchOutlined } from "@ant-design/icons";
import { useEffect, useState } from "react";
import axios from "axios";
import _ from "lodash"; // Import lodash ƒë·ªÉ debounce API call

const AddPromotion = () => {
    const { Title } = Typography;

    const [loading, setLoading] = useState(false); // Tr·∫°ng th√°i loading
    const [products, setProducts] = useState([]); // Danh s√°ch s·∫£n ph·∫©m
    const [selectedProducts, setSelectedProducts] = useState([]); // Danh s√°ch s·∫£n ph·∫©m ƒë√£ ch·ªçn
    const [searchTerm, setSearchTerm] = useState(""); // T·ª´ kh√≥a t√¨m ki·∫øm
    const pageSize = 5; // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªói trang
    const [currentPage, setCurrentPage] = useState(1); // State l∆∞u trang hi·ªán t·∫°i
    const [productDetails, setProductDetails] = useState([]);


    /**
     * üü¢ H√†m g·ªçi API l·∫•y danh s√°ch s·∫£n ph·∫©m khi load trang
     */
    const fetchProductsData = async () => {
        setLoading(true);
        try {
            const response = await axios.get("http://localhost:8080/api/admin/product/hien");

            // L·ªçc d·ªØ li·ªáu: ch·ªâ l·∫•y s·∫£n ph·∫©m c√≥ totalQuantity > 0
            const filteredProducts = response.data.data.filter(product => product.totalQuantity > 0);

            setProducts(filteredProducts);
        } catch (error) {
            message.error("C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
        } finally {
            setLoading(false);
        }
    };

    /**
     * üü¢ H√†m g·ªçi API t√¨m ki·∫øm s·∫£n ph·∫©m theo t·ª´ kh√≥a
     */
    const searchProducts = async (productName) => {
        if (!productName) {
            fetchProductsData(); // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a, l·∫•y danh s√°ch ƒë·∫ßy ƒë·ªß
            return;
        }

        setLoading(true);
        try {
            let response;
            // Ki·ªÉm tra n·∫øu productName l√† s·ªë th√¨ g·ªçi API minQuantity, ng∆∞·ª£c l·∫°i g·ªçi API productname
            if (!isNaN(productName)) {
                response = await axios.get(
                    `http://localhost:8080/api/admin/product/searchQuantityProduct/${productName}`
                );
            } else {
                response = await axios.get(
                    `http://localhost:8080/api/admin/product/searchNameProduct/${productName}`
                );
            }

            // Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ t·ªìn t·∫°i kh√¥ng
            if (response.data?.data) {
                // L·ªçc l·∫°i d·ªØ li·ªáu: ch·ªâ l·∫•y s·∫£n ph·∫©m c√≥ totalQuantity > 0
                const filteredProducts = response.data.data.filter(product => product.totalQuantity > 0);
                setProducts(filteredProducts);
            } else {
                setProducts([]); // Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ
            }
        } catch (error) {
            console.error("L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m:", error);
            message.error("C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm.");
        } finally {
            setLoading(false);
        }
    };



    /**
     * üü¢ X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p v√†o √¥ t√¨m ki·∫øm
     */
    const handleSearchChange = _.debounce((e) => {
        setSearchTerm(e.target.value);
        searchProducts(e.target.value);
    }, 500);

    /**
     * üü¢ X·ª≠ l√Ω ch·ªçn s·∫£n ph·∫©m b·∫±ng checkbox
     */
    const handleDetailCheckboxChange = (e, record) => {
        if (e.target.checked) {
            setSelectedProducts([...selectedProducts, record]); // ‚úÖ L∆∞u d·ªØ li·ªáu ƒë√£ ch·ªçn
        } else {
            setSelectedProducts(selectedProducts.filter((p) => p.id !== record.id));
        }
    };
    const fetchProductDetails = async (id) => {
        setLoading(true);
        try {
            const response = await axios.get(`http://localhost:8080/api/admin/product/detail/${id}`);
            setProductDetails(response.data.data || []);
        } catch (error) {
            message.error("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt s·∫£n ph·∫©m.");
        } finally {
            setLoading(false);
        }
    };


    const handleCheckboxChange = async (e, record) => {
        if (e.target.checked) {
            try {
                const response = await axios.get(`http://localhost:8080/api/admin/productdetail/product/${record.id}`);

                if (response.data?.data) {
                    setProductDetails(response.data.data); // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch chi ti·∫øt
                } else {
                    setProductDetails([]); // ‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu th√¨ hi·ªÉn th·ªã r·ªóng
                }
            } catch (error) {
                message.error("L·ªói khi t·∫£i chi ti·∫øt s·∫£n ph·∫©m.");
            }
        } else {
            setProductDetails([]); // ‚úÖ B·ªè ch·ªçn th√¨ x√≥a d·ªØ li·ªáu chi ti·∫øt
        }
    };

    useEffect(() => {
        if (selectedProducts.length > 0) {
            fetchProductDetails(selectedProducts[0].id); // ‚úÖ L·∫•y chi ti·∫øt c·ªßa s·∫£n ph·∫©m ƒë·∫ßu ti√™n ƒë∆∞·ª£c ch·ªçn
        }
    }, [selectedProducts]);

    const columns = [
        {
            dataIndex: "select", key: "select", width: "5rem",
            render: (_, record) => (
                <Checkbox
                    checked={selectedProducts.some((p) => p.id === record.id)}
                    onChange={(e) => handleCheckboxChange(e, record)}
                />),
        },
        { title: "STT", dataIndex: "stt", key: "stt", width: "5rem", render: (_, __, index) => (currentPage - 1) * pageSize + index + 1, },
        { title: "T√™n S·∫£n Ph·∫©m", dataIndex: "productName", key: "productName", width: "20rem", },
        { title: "S·ªë l∆∞·ª£ng", dataIndex: "totalQuantity", key: "totalQuantity", width: "20rem", },
    ];
    const columnsDetail = [
        {
            dataIndex: "select", key: "select", width: "5rem",
            render: (_, record) => (
                <Checkbox
                    checked={selectedProducts.some((p) => p.id === record.id)}
                    onChange={(e) => handleDetailCheckboxChange(e, record)}
                />),
        },
        { title: "STT", dataIndex: "stt", key: "stt", width: "5rem", render: (_, __, index) => index + 1 },
        { title: "T√™n S·∫£n Ph·∫©m", dataIndex: "productName", key: "productName", width: "20rem" },
        { title: "Th∆∞∆°ng Hi·ªáu", dataIndex: "brandName", key: "brandName", width: "15rem" },
        { title: "Lo·∫°i", dataIndex: "typeName", key: "typeName", width: "15rem" },
        { title: "M√†u S·∫Øc", dataIndex: "colorName", key: "colorName", width: "10rem" },
        { title: "Ch·∫•t Li·ªáu", dataIndex: "materialName", key: "materialName", width: "15rem" },
        { title: "K√≠ch C·ª°", dataIndex: "sizeName", key: "sizeName", width: "10rem" },
        { title: "ƒê·∫ø Gi√†y", dataIndex: "soleName", key: "soleName", width: "15rem" },
        { title: "Gi·ªõi T√≠nh", dataIndex: "genderName", key: "genderName", width: "10rem" },
        { title: "S·ªë l∆∞·ª£ng", dataIndex: "quantity", key: "quantity", width: "10rem" },
        { title: "Tr·ªçng L∆∞·ª£ng (kg)", dataIndex: "weight", key: "weight", width: "10rem" },
    ];
    return (
        <Row gutter={20}>
            <Col span={16}>
                <Card>
                    <Title level={2}>S·∫£n Ph·∫©m</Title>
                    <Row gutter={[16, 16]}>
                        <Col span={20}>
                            <Input
                                placeholder="Nh·∫≠p v√†o t√™n s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m!"
                                prefix={<SearchOutlined />}
                                allowClear
                                onChange={handleSearchChange}
                            />
                        </Col>
                    </Row>
                    <Table
                        columns={columns}
                        dataSource={products}
                        rowKey="id"
                        loading={loading}
                        pagination={{
                            current: currentPage,
                            pageSize: pageSize,
                            total: products.length,
                            onChange: (page) => setCurrentPage(page),
                        }}
                    />
                </Card>
            </Col>
            {/* <Col span={16}>
                <Card>
                    <Title level={2}>S·∫£n Ph·∫©m Chi Ti·∫øt</Title>

                    <Row gutter={[16, 16]}>
                        <Col span={20}>
                            <Input
                                placeholder="Nh·∫≠p v√†o t√™n s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m!"
                                prefix={<SearchOutlined />}
                                allowClear
                                onChange={handleSearchChange}
                            />
                        </Col>

                    </Row>

                    <Table
                        columns={columnsDetail}
                        dataSource={productDetails}  // ‚úÖ Hi·ªÉn th·ªã danh s√°ch chi ti·∫øt thay v√¨ `products`
                        rowKey="id"
                        loading={loading}
                        pagination={{
                            current: currentPage,
                            pageSize: pageSize,
                            total: products.length,
                            onChange: (page) => setCurrentPage(page),
                        }}

                    />

                </Card>
            </Col> */}
        </Row>
    );
};

export default AddPromotion;

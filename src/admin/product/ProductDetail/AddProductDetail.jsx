import React, { useEffect, useRef, useState } from "react";
import {
  Drawer,
  Row,
  Col,
  Select,
  InputNumber,
  Input,
  Button,
  Space,
  Card,
  Table,
  Form,
  Upload,
  notification,
  Modal,
  ColorPicker,
} from "antd";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";
import {
  createProductDetailList,
  fetchDataSelectBrand,
  fetchDataSelectColor,
  fetchDataSelectGender,
  fetchDataSelectMaterial,
  fetchDataSelectProduct,
  fetchDataSelectSize,
  fetchDataSelectSole,
  fetchDataSelectType,
} from "./ApiProductDetail";
import { PlusOutlined } from "@ant-design/icons";
import { IoAddCircleOutline, IoAddCircleSharp } from "react-icons/io5";
import { MdAdd, MdAddBox, MdAddCircleOutline } from "react-icons/md";
import { BiSolidMessageSquareAdd } from "react-icons/bi";
import { IoMdAdd } from "react-icons/io";
import { createProduct } from "../Product/ApiProduct";
import ModalAddProduct from "../Product/ModalAddProduct";
import { createSize } from "../Size/ApiSize";
import { createColor } from "../Color/ApiColor";
import { createBrand } from "../Brand/apibrand";
import { createSole } from "../Sole/ApiSole";
import { createType } from "../Type/ApiType";
import { createMaterial } from "../Material/ApiMaterial";
import { createGender } from "../Gender/ApiGender";
import { Navigate, useNavigate } from "react-router-dom";
import Breadcrumb from "../BreadCrumb";
import { COLORS } from "../../../constants/constants";
import ModalAddNew from "./ModalAddNew";
import ModalAddNewSize from "./ModalAddNewSize";

const { TextArea } = Input;

const ProductDetailDrawer = () => {
  const navigate = useNavigate();

  const [selectedRowKeys, setSelectedRowKeys] = useState([]);

  const [tableData, setTableData] = useState([]);
  const [colors, setColors] = useState([]); // Kh·ªüi t·∫°o v·ªõi m·∫£ng r·ªóng ƒë·ªÉ tr√°nh l·ªói
  const [sizes, setSizes] = useState([]);
  const [color, setColor] = useState([]); // Kh·ªüi t·∫°o v·ªõi m·∫£ng r·ªóng ƒë·ªÉ tr√°nh l·ªói
  const [size, setSize] = useState([]);
  const [products, setProducts] = useState([]);
  const [product, setProduct] = useState([]);
  const [form] = Form.useForm();
  const [hasSelected, setHasSelected] = useState(false);

  const [formModalSLVaGia] = Form.useForm();
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [commonQuantity, setCommonQuantity] = useState(0);
  const [commonPrice, setCommonPrice] = useState(0);
  const [commonWeight, setCommonWeight] = useState(0);

  // modal
  const [openCreateProduct, setOpenCreateProduct] = useState(false);
  const [addTypeModalVisible, setAddTypeModalVisible] = useState(false);
  const [addBrandModalVisible, setAddBrandModalVisible] = useState(false);
  const [addColorModalVisible, setAddColorModalVisible] = useState(false);
  const [addSizeModalVisible, setAddSizeModalVisible] = useState(false);
  const [addMaterialModalVisible, setAddMaterialModalVisible] = useState(false);
  const [addSoleModalVisible, setAddSoleModalVisible] = useState(false);
  const [addGenderModalVisible, setAddGenderModalVisible] = useState(false);

  const [loading, setLoading] = useState(false);
  const [dataSelectBrand, setDataSelectBrand] = useState([]);
  const [dataSelectColor, setDataSelectColor] = useState([]);
  const [dataSelectGender, setDataSelectGender] = useState([]);
  const [dataSelectMaterial, setDataSelectMaterial] = useState([]);
  const [dataSelectProduct, setDataSelectProduct] = useState([]);
  const [dataSelectSize, setDataSelectSize] = useState([]);
  const [dataSelectSole, setDataSelectSole] = useState([]);
  const [dataSelectType, setDataSelectType] = useState([]);

  const [totalProducts, setTotalProducts] = useState(0);
  const [request, setRequest] = useState(() => ({
    status: "HOAT_DONG",
  }));

  // them nhanh khi nhap
  const [searchProduct, setSearchProduct] = useState("");
  const [searchBrand, setSearchBrand] = useState("");
  const [searchColor, setSearchColor] = useState("");
  const [searchGender, setSearchGender] = useState("");
  const [searchMaterial, setSearchMaterial] = useState("");
  const [searchSole, setSearchSole] = useState("");
  const [searchSize, setSearchSize] = useState("");
  const [searchType, setSearchType] = useState("");

  const [requestFilter, setRequestFilter] = useState();
  const [requestUpdate, setRequestUpdate] = useState({
    productName: null,
    brandName: null,
    typeName: null,
    colorName: null,
    materialName: null,
    sizeName: null,
    soleName: null,
    genderName: null,
    status: null,
    sortByQuantity: null,
    sortByPrice: null,
  });
  // ·∫£nh
  const [cleanUpImage, setCleanUpImage] = useState([]);

  // C·∫•u h√¨nh Cloudinary
  // H√†m upload ·∫£nh l√™n Cloudinary v√† nh·∫≠n URL v√† public_id

  const cleanUpImageRef = useRef(cleanUpImage);

  useEffect(() => {
    // C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi c·ªßa cleanUpImage v√†o ref khi n√≥ thay ƒë·ªïi
    cleanUpImageRef.current = cleanUpImage;
  }, [cleanUpImage]);

  // H√†m x√≥a ·∫£nh
  const deleteImages = async (imageIds) => {
    if (!imageIds || imageIds.length === 0) return;

    try {
      const deleteRequests = imageIds.map((id) =>
        fetch("http://localhost:8080/cloudinary/delete", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ public_id: id }),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.result === "ok") {
              console.log(` ƒê√£ x√≥a ·∫£nh ${id} kh·ªèi Cloudinary`);
            } else {
              console.error("L·ªói x√≥a ·∫£nh:", data);
            }
          })
          .catch((error) => console.error("L·ªói khi x√≥a ·∫£nh:", error))
      );

      await Promise.all(deleteRequests); // ƒê·ª£i t·∫•t c·∫£ c√°c ·∫£nh ƒë∆∞·ª£c x√≥a
    } catch (error) {
      console.error("L·ªói khi x√≥a ·∫£nh h√†ng lo·∫°t:", error);
    }
  };

  useEffect(() => {
    return () => {
      console.log("üßπ D·ªçn d·∫πp ·∫£nh...");
      console.log(cleanUpImageRef.current);

      deleteImages(cleanUpImageRef.current); // G·ªçi h√†m x√≥a ·∫£nh
    };
  }, []);

  useEffect(() => {
    console.log("Clean up images updated:", cleanUpImage);
  }, [cleanUpImage]);

  const cloudinaryUpload = async (file) => {
    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "uploaddatn"); // Thay b·∫±ng preset c·ªßa b·∫°n

    const res = await fetch(
      `https://api.cloudinary.com/v1_1/dieyhvcou/image/upload`, 
      { method: "POST", body: formData }
    );
    const data = await res.json();
    console.log("Cloudinary Upload Response:", data); // Log th√¥ng tin tr·∫£ v·ªÅ t·ª´ Cloudinary
    setCleanUpImage((pre) => [...pre, data.public_id]);

    if (data.secure_url && data.public_id) {
      // Tr·∫£ v·ªÅ th√¥ng tin c·ªßa ·∫£nh (url v√† public_id)
      return {
        url: data.secure_url, // URL ·∫£nh
        public_id: data.public_id, // public_id ·∫£nh
      };
    } else {
      throw new Error("Upload failed");
    }
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi (upload v√† th√™m ·∫£nh v√†o tableData)
  const onChange = async (color, { fileList }) => {
    const updatedImages = fileList.map((file) => ({
      url: file.response?.url || file.url, // L·∫•y URL t·ª´ response (n·∫øu c√≥) ho·∫∑c t·ª´ fileList
      publicId: file.response?.public_id || file.public_id, // L·∫•y public_id t·ª´ response
      // uid: file.uid,
      // status: file.status,
    }));

    // C·∫≠p nh·∫≠t `tableData` ngay sau khi c√≥ URL t·ª´ Cloudinary
    setTableData((prev) =>
      prev.map((item) =>
        item.color === color
          ? { ...item, image: updatedImages.slice(0, 6) } // Gi·ªØ t·ªëi ƒëa 6 ·∫£nh
          : item
      )
    );

    console.log("Updated Table Data:", tableData);
  };

  // H√†m x·ª≠ l√Ω khi x√≥a ·∫£nh
  const handleRemove = async (file, color) => {
    console.log(file);

    if (file.response?.public_id) {
      try {
        const res = await fetch("http://localhost:8080/cloudinary/delete", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ public_id: file.response?.public_id }),
        });

        const data = await res.json();
        if (data.result === "ok") {
          setTableData((prev) =>
            prev.map((item) =>
              item.color === color
                ? {
                    ...item,
                    image: Array.isArray(item.image)
                      ? item.image.filter(
                          (img) => img.public_id !== file.response?.public_id
                        )
                      : [], // N·∫øu kh√¥ng ph·∫£i l√† m·∫£ng, g√°n th√†nh m·∫£ng r·ªóng
                  }
                : item
            )
          );
        } else {
          console.error("L·ªói x√≥a ·∫£nh:", data);
        }
      } catch (error) {
        console.error("L·ªói khi x√≥a ·∫£nh:", error);
      }
    } else {
      console.warn("·∫¢nh kh√¥ng c√≥ public_id, kh√¥ng th·ªÉ x√≥a");
    }
    console.log("ƒë√¢y l√† d·ªØ li·ªáu", tableData);
  };

  // H√†m Preview
  const onPreview = async (file) => {
    let src = file.url;

    if (!src && file.originFileObj) {
      // N·∫øu ch∆∞a c√≥ URL, t·∫°o URL t·∫°m th·ªùi cho ·∫£nh
      src = await new Promise((resolve) => {
        const reader = new FileReader();
        reader.readAsDataURL(file.originFileObj);
        reader.onload = () => resolve(reader.result);
      });
    }

    if (typeof src === "string") {
      const image = new Image();
      image.src = src;
      const imgWindow = window.open(src);
      imgWindow?.document.write(image.outerHTML);
    }
  };

  // C·ªôt trong b·∫£ng

  // h·∫øt do·∫°n up ·∫£nh
  const handleModalOk = async () => {
    try {
      // K√≠ch ho·∫°t validation
      const values = await formModalSLVaGia.validateFields();
      // N·∫øu validation th√†nh c√¥ng, th·ª±c hi·ªán c√°c h√†nh ƒë·ªông b·∫°n mu·ªën
      console.log(values);

      const updatedData = tableData.map((item) => {
        // if (selectedRowKeys.includes(item.key)) {
        return {
          ...item,
          quantity: commonQuantity,
          price: commonPrice,
          weight: commonWeight,
        };
        // }
        // return item;
      });
      setTableData(updatedData);
      formModalSLVaGia.resetFields(); // ƒê·∫∑t l·∫°i tr∆∞·ªùng form
      setSelectedRowKeys([]); // B·ªè ch·ªçn t·∫•t c·∫£ c√°c d√≤ng
      setHasSelected(false); // B·ªè ch·ªçn t·∫•t c·∫£ c√°c d√≤ng
      setIsModalVisible(false); // ƒê√≥ng modal
    } catch (error) {
      // N·∫øu c√≥ l·ªói, ch·ªâ c·∫ßn th√¥ng b√°o
      console.log("Validation failed:", error);
    }
    // C·∫≠p nh·∫≠t gi√° v√† s·ªë l∆∞·ª£ng chung cho c√°c d√≤ng ƒë∆∞·ª£c ch·ªçn
  };
  const handleModalCancel = () => {
    setCommonPrice(0); // ƒê·∫∑t gi√° chung v·ªÅ 0
    setCommonWeight(0);
    setCommonQuantity(0); // ƒê·∫∑t s·ªë l∆∞·ª£ng chung v·ªÅ 0
    setSelectedRowKeys([]); // B·ªè ch·ªçn t·∫•t c·∫£ c√°c d√≤ng
    setHasSelected(false); // B·ªè ch·ªçn t·∫•t c·∫£ c√°c d√≤ng
    setIsModalVisible(false); // ƒê√≥ng modal m√† kh√¥ng thay ƒë·ªïi g√¨
  };
  // th√™m nhanh
  const handleCreateProduct = async (productData) => {
    try {
      setLoading(true);
      console.log(request);
      await createProduct(productData);
      fetchDataProduct();
      notification.success({
        message: "Success",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: `Th√™m s·∫£n ph·∫©m  th√†nh c√¥ng!`,
      });
    } catch (error) {
      console.error(error);
      notification.error({
        message: "Error",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: "Failed to update san pham",
      });
    } finally {
      setLoading(false);
      setOpenCreateProduct(false);
    }
  };

  const handleCreateSize = async (data) => {
    try {
      setLoading(true);
      await createSize(data);
      fetchDataSize();
      notification.success({
        message: "Success",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: `Th√™m K√≠ch c·ª°  th√†nh c√¥ng!`,
      });
      setAddSizeModalVisible(false);
    } catch (error) {
      console.error(error);
      notification.error({
        message: "Error",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: "Th√™m k√≠ch c·ª° th·∫•t b·∫°i",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCreateColor = async (data) => {
    try {
      setLoading(true);
      await createColor(data);
      fetchDataColor();
      notification.success({
        message: "Success",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: `Th√™m M√†u s·∫Øc th√†nh c√¥ng!`,
      });
      setAddColorModalVisible(false);
    } catch (error) {
      console.error(error);
      notification.error({
        message: "Error",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: "Th√™m M√†u s·∫Øc th·∫•t b·∫°i",
      });
    } finally {
      setLoading(false);
    }
  };
  const handleCreateBrand = async (data) => {
    try {
      setLoading(true);
      await createBrand(data);
      fetchDataBrand();
      notification.success({
        message: "Success",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: `Th√™m Th∆∞∆°ng hi·ªáu th√†nh c√¥ng!`,
      });
      setAddBrandModalVisible(false);
    } catch (error) {
      console.error(error);
      notification.error({
        message: "Error",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: "Th√™m Th∆∞∆°ng hi·ªáu th·∫•t b·∫°i",
      });
    } finally {
      setLoading(false);
    }
  };
  const handleCreateSole = async (data) => {
    try {
      setLoading(true);
      await createSole(data);
      fetchDataSole();
      notification.success({
        message: "Success",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: `Th√™m ƒê·∫ø gi√†y th√†nh c√¥ng!`,
      });
      setAddSoleModalVisible(false);
    } catch (error) {
      console.error(error);
      notification.error({
        message: "Error",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: "Th√™m ƒê·∫ø gi√†y th·∫•t b·∫°i",
      });
    } finally {
      setLoading(false);
    }
  };
  const handleCreateType = async (data) => {
    try {
      setLoading(true);
      await createType(data);
      fetchDataType();
      notification.success({
        message: "Success",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: `Th√™m Lo·∫°i gi√†y th√†nh c√¥ng!`,
      });
      setAddTypeModalVisible(false);
    } catch (error) {
      console.error(error);
      notification.error({
        message: "Error",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: "Th√™m Lo·∫°i gi√†y th·∫•t b·∫°i",
      });
    } finally {
      setLoading(false);
    }
  };
  const handleCreateMaterial = async (data) => {
    try {
      setLoading(true);
      await createMaterial(data);
      fetchDataMaterial();
      notification.success({
        message: "Success",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: `Th√™m Ch·∫•t li·ªáu th√†nh c√¥ng!`,
      });
      setAddMaterialModalVisible(false);
    } catch (error) {
      console.error(error);
      notification.error({
        message: "Error",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: "Th√™m Ch·∫•t li·ªáu th·∫•t b·∫°i",
      });
    } finally {
      setLoading(false);
    }
  };
  const handleCreateGenDer = async (data) => {
    try {
      setLoading(true);
      await createGender(data);
      fetchDataGender();
      notification.success({
        message: "Success",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: `Th√™m Gi·ªõi t√≠nh th√†nh c√¥ng!`,
      });
      setAddGenderModalVisible(false);
    } catch (error) {
      console.error(error);
      notification.error({
        message: "Error",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: "Th√™m Gi·ªõi T√≠nh th·∫•t b·∫°i",
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    setProducts(dataSelectProduct);
    setSizes(dataSelectSize);
    setColors(dataSelectColor);

    fetchDataBrand();
    fetchDataColor();
    fetchDataGender();
    fetchDataMaterial();
    fetchDataProduct();
    fetchDataSize();
    fetchDataSole();
    fetchDataType();
  }, []);

  useEffect(() => {
    setProducts(dataSelectProduct);
    setSizes(dataSelectSize);
    setColors(dataSelectColor);
  }, [color, size, product]);
  useEffect(() => {
    setRequest((prev) => ({
      ...prev,
      productId: dataSelectProduct[0]?.id || null,
      brandId: dataSelectBrand[0]?.id || null,
      genderId: dataSelectGender[0]?.id || null,
      materialId: dataSelectMaterial[0]?.id || null,
      typeId: dataSelectType[0]?.id || null,
      soleId: dataSelectSole[0]?.id || null,
    }));
    setProduct(dataSelectProduct[0]?.id || null);
  }, [
    dataSelectBrand,
    dataSelectGender,
    dataSelectMaterial,
    dataSelectType,
    dataSelectSole,
  ]); // Ch·∫°y l·∫°i khi `dataSelectBrand` thay ƒë·ªïi

  const fetchDataBrand = async () => {
    setLoading(true);
    try {
      const response = await fetchDataSelectBrand();
      console.log("Response from API brand:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setDataSelectBrand(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };
  const fetchDataColor = async () => {
    setLoading(true);
    try {
      const response = await fetchDataSelectColor();
      console.log("Response from API color:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setDataSelectColor(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };
  const fetchDataGender = async () => {
    setLoading(true);
    try {
      const response = await fetchDataSelectGender();
      console.log("Response from API gender:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setDataSelectGender(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };

  const fetchDataProduct = async () => {
    setLoading(true);
    try {
      const response = await fetchDataSelectProduct();
      console.log("Response from API product:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setDataSelectProduct(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };
  const fetchDataMaterial = async () => {
    setLoading(true);
    try {
      const response = await fetchDataSelectMaterial();
      console.log("Response from API material:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setDataSelectMaterial(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };

  const fetchDataSize = async () => {
    setLoading(true);
    try {
      const response = await fetchDataSelectSize();
      console.log("Response from API size:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setDataSelectSize(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };

  const fetchDataSole = async () => {
    setLoading(true);
    try {
      const response = await fetchDataSelectSole();
      console.log("Response from API Sole:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setDataSelectSole(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };

  const fetchDataType = async () => {
    setLoading(true);
    try {
      const response = await fetchDataSelectType();
      console.log("Response from API type:", response); // Log response ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
      setDataSelectType(response.data);
    } catch (error) {
      message.error(error.message || "C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.");
    } finally {
      setLoading(false);
    }
  };

  const handleCreateProductDetail = async (tableData) => {
    try {
      setLoading(true);
      await createProductDetailList(tableData);
      // setFilterActice(false);
      // fetchProductsData(); // Refresh data after creation
      notification.success({
        message: "Success",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: `Th√™m s·∫£n ph·∫©m  th√†nh c√¥ng!`,
      });
    } catch (error) {
      console.error("Failed to update san pham", error);
      notification.error({
        message: "Error",
        duration: 4,
        pauseOnHover: false,
        showProgress: true,
        description: "Failed to update san pham",
      });
      deleteImages(cleanUpImageRef.current); // G·ªçi h√†m x√≥a ·∫£nh khoit
    } finally {
      setLoading(false);
    }
  };
  const resetFrom = () => {
    generateTableData(color, size, product);
    setTableData([]);
    setRequest((prev) => ({
      // ...prev,
      productId: dataSelectProduct[0]?.id || null,
      brandId: dataSelectBrand[0]?.id || null,
      genderId: dataSelectGender[0]?.id || null,
      materialId: dataSelectMaterial[0]?.id || null,
      typeId: dataSelectType[0]?.id || null,
      soleId: dataSelectSole[0]?.id || null,
    }));

    console.log("ƒë√£ reset from");
    console.log(request);
  };
  const normFile = (e) => {
    if (Array.isArray(e)) {
      return e;
    }
    return e?.fileList;
  };
  const onSelectChange = (newSelectedRowKeys) => {
    setSelectedRowKeys(newSelectedRowKeys);
    setHasSelected(newSelectedRowKeys.length > 0);
    console.log("ƒë√¢y l√† row ƒë√£ ch·ªçn" + selectedRowKeys);
    console.log("ƒë√¢y l√† row ƒë√£ ch·ªçn" + selectedRowKeys);
  };

  const rowSelection = {
    selectedRowKeys,
    onChange: onSelectChange,
  };
  const handleTableDataChange = (field, value) => {
    const updatedData = tableData.map((item) => ({ ...item, [field]: value }));
    setTableData(updatedData); // C·∫≠p nh·∫≠t l·∫°i state
    console.log(tableData);
  };

  const handleInputChange = (key, dataIndex, value) => {
    const numericValue = parseFloat(value);

    // Ki·ªÉm tra n·∫øu gi√° tr·ªã √¢m
    if (numericValue < 0) {
      notification.error({
        message: "L·ªói nh·∫≠p li·ªáu",
        description: `${
          dataIndex === "soLuong" ? "S·ªë l∆∞·ª£ng" : "Gi√°"
        } kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n 0`,
        duration: 3,
      });
      return; // D·ª´ng x·ª≠ l√Ω khi ph√°t hi·ªán gi√° tr·ªã √¢m
    }
    const updatedData = tableData.map((item) => {
      if (item.key === key) {
        return { ...item, [dataIndex]: numericValue };
      }
      return item;
    });
    setTableData(updatedData);
    console.log(tableData);
  };
  const columns = [
    {
      title: "T√™n s·∫£n ph·∫©m",
      dataIndex: "productName",
    },

    {
      title: "S·ªë l∆∞·ª£ng",
      dataIndex: "quantity",
      render: (text, record) => (
        <Input
          type="number"
          min={0}
          value={record.quantity}
          defaultValue={text}
          onChange={(e) =>
            handleInputChange(record.key, "quantity", e.target.value)
          }
          suffix={<span>ƒê√¥i</span>}
        />
      ),
    },
    {
      title: "Gi√°",
      dataIndex: "price",
      render: (text, record) => (
        <Input
          type="number"
          min={0}
          defaultValue={text}
          value={record.price}
          step={1000} // B∆∞·ªõc nh·∫£y 1,000 VNƒê
          onChange={(e) =>
            handleInputChange(record.key, "price", e.target.value)
          }
          suffix={<span>VNƒê</span>}
        />
      ),
    },
    {
      title: "C√¢n n·∫∑ng",
      dataIndex: "weight",
      render: (text, record) => (
        <Input
          type="number"
          min={0}
          defaultValue={text}
          value={record.weight}
          onChange={(e) =>
            handleInputChange(record.key, "weight", e.target.value)
          }
          suffix={<span>Kg</span>}
        />
      ),
    },
    {
      title: "Action",
      dataIndex: "status",
      render: (text, record) => (
        <Button
          type="primary"
          style={{}}
          onClick={() => handleDelete(record.key)}
        >
          X√≥a
        </Button>
      ),
    },
    {
      title: "H√¨nh ·∫£nh",
      dataIndex: "color",
      width: 400,
      fixed: "right",
      render: (text, record) => {
        // Ki·ªÉm tra n·∫øu l√† item ƒë·∫ßu ti√™n c√≥ m√†u color
        const isFirst =
          record.key ===
          tableData.find((item) => item.color === record.color)?.key;

        // ƒê·∫£m b·∫£o record.image lu√¥n l√† m·∫£ng v√† ch·ª©a c√°c URL h·ª£p l·ªá
        const imageList = Array.isArray(record.image) ? record.image : [];

        return isFirst ? (
          <Form.Item label="" valuePropName="fileList">
            <Upload
              customRequest={({ file, onSuccess, onError }) => {
                cloudinaryUpload(file)
                  .then(({ url, public_id }) => {
                    onSuccess({ url, public_id }); // Tr·∫£ c·∫£ public_id v·ªÅ
                  })
                  .catch(onError);
              }}
              listType="picture-card"
              // fileList={imageList.map(img => ({
              //   url: img,          // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng ƒë√∫ng URL ·∫£nh t·ª´ Cloudinary
              //   uid: img,          // UID cho t·ª´ng ·∫£nh
              //   status: 'done',    // ƒê√°nh d·∫•u ·∫£nh ƒë√£ t·∫£i l√™n th√†nh c√¥ng
              // }))}
              onChange={(info) => onChange(record.color, info)} // G·ªçi h√†m onChange khi ·∫£nh thay ƒë·ªïi
              onRemove={(file) => handleRemove(file, record.color)} // X·ª≠ l√Ω khi ·∫£nh b·ªã x√≥a
              onPreview={onPreview} // H√†m xem tr∆∞·ªõc ·∫£nh khi nh·∫•p
              multiple={true}
            >
              {/* Hi·ªÉn th·ªã n√∫t upload n·∫øu s·ªë l∆∞·ª£ng ·∫£nh √≠t h∆°n 6 */}
              {imageList.length < 6 && (
                <button
                  style={{
                    border: 0,
                    background: "none",
                    width: "80px",
                    height: "80px",
                  }}
                  type="button"
                >
                  <PlusOutlined />
                  <div style={{ marginTop: 8 }}>Upload</div>
                </button>
              )}
            </Upload>
          </Form.Item>
        ) : null;
      },
      onCell: (record) => {
        const sameColorItems = tableData.filter(
          (item) => item.color === record.color
        );
        return { rowSpan: sameColorItems.length }; // T√≠nh rowSpan ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng c√°c h√†ng c√πng m√†u
      },
    },
  ];
  const generateTableData = (
    selectedColors,
    selectedSizes,
    selectedProduct
  ) => {
    const newData = [];

    selectedColors.forEach((color) => {
      const colorItem = colors.find((item) => item.id === color);
      const productItem = products.find((item) => item.id === selectedProduct);
      if (!productItem) {
        console.log(products);

        console.error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi id:", selectedProduct);
        return; // D·ª´ng n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
      }
      const variants = selectedSizes.map((size) => {
        const sizeItem = sizes.find((item) => item.id === size); // S·ª≠a l·ªói

        return {
          key: `${color}-${size}`,
          colorId: color,
          sizeId: size,
          productId: product, //selectedProduct.id,
          productName: `${productItem.productName} [ ${sizeItem.sizeName}-${colorItem.colorName} ]`,
          quantity: 0,
          price: 0,
          weight: 0,
          image: [],
          status: 1,
          color: color, // Th√™m tr∆∞·ªùng color ƒë·ªÉ nh√≥m c√°c d√≤ng c√πng m√†u
          // m·ªói bi·∫øn th·ªÉ khi render ra ƒë·ªÅu c√≥ c√°c thu·ªôc t√≠nh
          brandId: dataSelectBrand[0]?.id || null,
          genderId: dataSelectGender[0]?.id || null,
          materialId: dataSelectMaterial[0]?.id || null,
          typeId: dataSelectType[0]?.id || null,
          soleId: dataSelectSole[0]?.id || null,
          description: null,
        };
      });

      console.log(tableData);
      console.log(productItem);

      newData.push(...variants);
    });

    setTableData(newData);
  };
  const handleColorChange = (selectedColors) => {
    setColor(selectedColors);
    console.log("color ƒë√£ ch·ªçn" + color);

    generateTableData(selectedColors, size, product);
  };

  const handleSizeChange = (selectedSizes) => {
    setSize(selectedSizes);
    generateTableData(color, selectedSizes, product);
  };
  const handleProductChange = (selectedProduct) => {
    setProduct(selectedProduct);
    generateTableData(color, size, selectedProduct);
    console.log(selectedProduct);
    console.log(request);
    setRequest((prev) => ({
      ...prev,
      productId: selectedProduct,
    }));
  };
  const handleDelete = (key) => {
    const updatedData = tableData.filter((item) => item.key !== key); // L·ªçc b·ªè d√≤ng c√≥ key t∆∞∆°ng ·ª©ng
    setTableData(updatedData); // C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu
  };
  const groupedData = color.map((colorId) => ({
    colorName: dataSelectColor.find((c) => c.id === colorId)?.colorName,
    rows: tableData.filter((row) => row.colorId === colorId),
  }));
  return (
    <Row gutter={[16, 16]}>
      <Col span={24}>
        <Card
          style={{
            marginBottom: "1rem",
          }}
        >
          <Row gutter={[16, 0]}>
            <Col>
              <h6>Th√¥ng tin c∆° b·∫£n</h6>
            </Col>
            <Col span={24}>
              <div>T√™n s·∫£n ph·∫©m</div>

              <Row gutter={[5, 0]}>
                <Col>
                  <Select
                    showSearch
                    style={{ width: "15rem" }}
                    placeholder="Ch·ªçn s·∫£n ph·∫©m"
                    optionFilterProp="label"
                    value={request.productId}
                    onSearch={(value) => setSearchProduct(value)} // L∆∞u gi√° tr·ªã t√¨m ki·∫øm
                    notFoundContent={
                      <a
                        onClick={() =>
                          handleCreateProduct({ productName: searchProduct })
                        }
                        style={{ padding: 0, color: "black" }}
                      >
                        Th√™m nhanh: {searchProduct}
                      </a>
                    }
                    onChange={handleProductChange}
                    options={dataSelectProduct?.map((p) => ({
                      value: p.id,
                      label: p.productName,
                    }))}
                  />
                </Col>
                <Col>
                  <Button
                    style={{ padding: 0, backgroundColor: `${COLORS.primary}` }}
                    onClick={() => setOpenCreateProduct(true)}
                  >
                    <MdAdd size={25} color="white" />
                  </Button>
                </Col>
              </Row>
            </Col>
            <Col span={24}>
              <div>M√¥ t·∫£</div>
              <ReactQuill
                theme="snow"
                value={request.description}
                placeholder="M√¥ t·∫£ t·ªëi ƒëa 200 t·ª´"
                onChange={(value) => {
                  setRequest((prev) => ({
                    ...prev,
                    description: value,
                  }));

                  handleTableDataChange("description", value);
                }}
                modules={{
                  toolbar: [
                    [{ header: [1, 2, false] }],
                    ["bold", "italic", "underline"],
                    [false, false],
                  ],
                }}
              />
            </Col>
          </Row>
        </Card>
        <Card>
          <Row>
            <Col span={24}>
              <h6>Thu·ªôc t√≠nh</h6>
            </Col>

            <Col span={8}>
              <div>Th∆∞∆°ng hi·ªáu</div>
              <Row gutter={[5, 0]}>
                <Col>
                  <Select
                    showSearch
                    style={{ width: "15rem" }}
                    placeholder="Ch·ªçn th∆∞∆°ng hi·ªáu"
                    optionFilterProp="label"
                    value={request.brandId}
                    onSearch={(value) => setSearchBrand(value)} // L∆∞u gi√° tr·ªã t√¨m ki·∫øm
                    notFoundContent={
                      <a
                        onClick={() =>
                          handleCreateBrand({ brandName: searchBrand })
                        }
                        style={{ padding: 0, color: "black" }}
                      >
                        Th√™m nhanh: {searchBrand}
                      </a>
                    }
                    onChange={(value) => {
                      setRequest((prev) => ({
                        ...prev,
                        brandId: value,
                      }));

                      handleTableDataChange("brandId", value);
                    }}
                    options={dataSelectBrand?.map((b) => ({
                      value: b.id,
                      label: b.brandName,
                    }))}
                  />
                </Col>
                <Col>
                  <Button
                    style={{ padding: 0, backgroundColor: `${COLORS.primary}` }}
                    onClick={() => setAddBrandModalVisible(true)}
                  >
                    <MdAdd size={25} color="white" />
                  </Button>
                </Col>
              </Row>
            </Col>
            <Col span={8}>
              <div>Gi·ªõi t√≠nh</div>

              <Row gutter={[5, 0]}>
                <Col>
                  <Select
                    showSearch
                    style={{ width: "15rem" }}
                    placeholder="Ch·ªçn gi·ªõi t√≠nh"
                    optionFilterProp="label"
                    value={request.genderId}
                    onSearch={(value) => setSearchGender(value)} // L∆∞u gi√° tr·ªã t√¨m ki·∫øm
                    notFoundContent={
                      <a
                        onClick={() =>
                          handleCreateGenDer({ genderName: searchGender })
                        }
                        style={{ padding: 0, color: "black" }}
                      >
                        Th√™m nhanh: {searchGender}
                      </a>
                    }
                    onChange={(value) => {
                      setRequest((prev) => ({
                        ...prev,
                        genderId: value,
                      }));

                      handleTableDataChange("genderId", value);
                    }}
                    options={dataSelectGender?.map((g) => ({
                      value: g.id,
                      label: g.genderName,
                    }))}
                  />
                </Col>
                <Col>
                  <Button
                    style={{ padding: 0, backgroundColor: `${COLORS.primary}` }}
                    onClick={() => setAddGenderModalVisible(true)}
                  >
                    <MdAdd size={25} color="white" />
                  </Button>
                </Col>
              </Row>
            </Col>
            <Col span={8}>
              <div>Ch·∫•t li·ªáu</div>

              <Row gutter={[5, 0]}>
                <Col>
                  <Select
                    showSearch
                    style={{ width: "15rem" }}
                    placeholder="Ch·ªçn ch·∫•t li·ªáu"
                    optionFilterProp="label"
                    value={request.materialId}
                    onSearch={(value) => setSearchMaterial(value)} // L∆∞u gi√° tr·ªã t√¨m ki·∫øm
                    notFoundContent={
                      <a
                        onClick={() =>
                          handleCreateMaterial({
                            materialName: searchMaterial,
                          })
                        }
                        style={{ padding: 0, color: "black" }}
                      >
                        Th√™m nhanh: {searchMaterial}
                      </a>
                    }
                    onChange={(value) => {
                      setRequest((prev) => ({
                        ...prev,
                        materialId: value,
                      }));

                      handleTableDataChange("materialId", value);
                    }}
                    options={dataSelectMaterial?.map((m) => ({
                      value: m.id,
                      label: m.materialName,
                    }))}
                  />
                </Col>
                <Col>
                  <Button
                    style={{ padding: 0, backgroundColor: `${COLORS.primary}` }}
                    onClick={() => setAddMaterialModalVisible(true)}
                  >
                    <MdAdd size={25} color="white" />
                  </Button>
                </Col>
              </Row>
            </Col>
            <Col span={8}>
              <div>Lo·∫°i gi√†y</div>

              <Row gutter={[5, 0]}>
                <Col>
                  <Select
                    showSearch
                    style={{ width: "15rem" }}
                    placeholder="Ch·ªçn lo·∫°i gi√†y"
                    optionFilterProp="label"
                    value={request.typeId}
                    onSearch={(value) => setSearchType(value)} // L∆∞u gi√° tr·ªã t√¨m ki·∫øm
                    notFoundContent={
                      <a
                        onClick={() =>
                          handleCreateType({ typeName: searchType })
                        }
                        style={{ padding: 0, color: "black" }}
                      >
                        Th√™m nhanh: {searchType}
                      </a>
                    }
                    onChange={(value) => {
                      setRequest((prev) => ({
                        ...prev,
                        typeId: value,
                      }));

                      handleTableDataChange("typeId", value);
                    }}
                    options={dataSelectType?.map((t) => ({
                      value: t.id,
                      label: t.typeName,
                    }))}
                  />
                </Col>
                <Col>
                  <Button
                    style={{ padding: 0, backgroundColor: `${COLORS.primary}` }}
                    onClick={() => setAddTypeModalVisible(true)}
                  >
                    <MdAdd size={25} color="white" />
                  </Button>
                </Col>
              </Row>
            </Col>
            <Col span={8}>
              <div>Lo·∫°i ƒë·∫ø gi√†y</div>

              <Row gutter={[5, 0]}>
                <Col>
                  <Select
                    showSearch
                    style={{ width: "15rem" }}
                    placeholder="Ch·ªçn lo·∫°i ƒë·∫ø gi√†y"
                    optionFilterProp="label"
                    value={request.soleId}
                    onSearch={(value) => setSearchSole(value)} // L∆∞u gi√° tr·ªã t√¨m ki·∫øm
                    notFoundContent={
                      <a
                        onClick={() =>
                          handleCreateSole({ soleName: searchSole })
                        }
                        style={{ padding: 0, color: "black" }}
                      >
                        Th√™m nhanh: {searchSole}
                      </a>
                    }
                    onChange={(value) => {
                      setRequest((prev) => ({
                        ...prev,
                        soleId: value,
                      }));

                      handleTableDataChange("soleId", value);
                    }}
                    options={dataSelectSole?.map((s) => ({
                      value: s.id,
                      label: s.soleName,
                    }))}
                  />
                </Col>
                <Col>
                  <Button
                    style={{ padding: 0, backgroundColor: `${COLORS.primary}` }}
                    onClick={() => setAddSoleModalVisible(true)}
                  >
                    <MdAdd size={25} color="white" />
                  </Button>
                </Col>
              </Row>
            </Col>
          </Row>
          <Row gutter={[0, 15]} style={{ marginTop: "16px" }}>
            <Col span={8}>
              <div>M√†u s·∫Øc</div>

              <Row gutter={[5, 0]}>
                <Col>
                  <Select
                    mode="multiple"
                    showSearch
                    style={{ width: "15rem" }}
                    placeholder="Ch·ªçn m√†u s·∫Øc"
                    value={request.colorId}
                    onSearch={(value) => setSearchColor(value)} // L∆∞u gi√° tr·ªã t√¨m ki·∫øm
                    notFoundContent={
                      <a
                        onClick={() =>
                          handleCreateColor({ colorName: searchColor })
                        }
                        style={{ padding: 0, color: "black" }}
                      >
                        Th√™m nhanh: {searchColor}
                      </a>
                    }
                    optionFilterProp="title" // S·ª≠ d·ª•ng 'title' ƒë·ªÉ t√¨m ki·∫øm
                    onChange={handleColorChange}
                    options={dataSelectColor?.map((c) => ({
                      value: c.id,
                      label: (
                        <div
                          style={{
                            display: "flex",
                            alignItems: "center",
                            gap: "8px",
                          }}
                        >
                          <div
                            style={{
                              width: "1.2rem",
                              height: "1.2rem",
                              backgroundColor: c.code,
                              borderRadius: "50%",
                              border: "1px solid #ccc",
                            }}
                          />
                          {c.colorName}
                        </div>
                      ),
                      title: c.colorName, // D√πng 'title' ƒë·ªÉ l·ªçc khi search
                    }))}
                  />
                </Col>
                <Col>
                  <Button
                    style={{ padding: 0, backgroundColor: `${COLORS.primary}` }}
                    onClick={() => setAddColorModalVisible(true)}
                  >
                    <MdAdd size={25} color="white" />
                  </Button>
                </Col>
              </Row>
            </Col>
            <Col span={8}>
              <div>K√≠ch c·ª°</div>

              <Row gutter={[5, 0]}>
                <Col>
                  <Select
                    mode="multiple"
                    showSearch
                    style={{ width: "15rem" }}
                    placeholder="Ch·ªçn k√≠ch c·ª°"
                    optionFilterProp="label"
                    value={request.sizeId}
                    onSearch={(value) => setSearchSize(value)} // L∆∞u gi√° tr·ªã t√¨m ki·∫øm
                    notFoundContent={
                      <a
                        onClick={() =>
                          handleCreateSize({ sizeName: searchSize })
                        }
                        style={{ padding: 0, color: "black" }}
                      >
                        Th√™m nhanh: {searchSize}
                      </a>
                    }
                    onChange={handleSizeChange}
                    options={dataSelectSize?.map((s) => ({
                      value: s.id,
                      label: s.sizeName,
                    }))}
                  />
                </Col>
                <Col>
                  <Button
                    style={{ padding: 0, backgroundColor: `${COLORS.primary}` }}
                    onClick={() => setAddSizeModalVisible(true)}
                  >
                    <MdAdd size={25} color="white" />
                  </Button>
                </Col>
              </Row>
            </Col>
          </Row>
        </Card>
      </Col>
      <Col span={24}>
        <Row gutter={[16, 16]}>
          <Col span={24}>
            <Row gutter={[16, 16]}>
              <Col>
                {tableData.length > 0 && (
                  <Row gutter={[16, 16]}>
                    <Col>
                      <Button
                        onClick={() => {
                          handleCreateProductDetail(tableData);
                          resetFrom();
                          setCleanUpImage([]);
                          navigate(-1);
                        }}
                        type="primary"
                        style={{}}
                      >
                        L∆∞u th√¥ng tin
                      </Button>
                    </Col>
                    <Col>
                      <Button
                        type="primary"
                        onClick={() => setIsModalVisible(true)}
                        // disabled={!hasSelected}
                        loading={loading}
                        style={{}}
                      >
                        Ch·ªânh s·ªë l∆∞·ª£ng v√† gi√° chung
                      </Button>
                    </Col>
                  </Row>
                )}
              </Col>
              {groupedData.map((group) => (
                <Col span={24} key={group.colorName}>
                  <Card title={`S·∫£n ph·∫©m chi ti·∫øt: ${group.colorName}`}>
                    <Table
                      // rowSelection={rowSelection}
                      columns={columns}
                      dataSource={group.rows}
                      pagination={false}
                      rowKey="key"
                    />
                  </Card>
                </Col>
              ))}
            </Row>
          </Col>
        </Row>
      </Col>

      <ModalAddProduct
        open={openCreateProduct}
        onCreate={handleCreateProduct}
        onCancel={() => setOpenCreateProduct(false)}
      />
      <Modal
        title="Set s·ªë l∆∞·ª£ng v√† gi√° chung"
        open={isModalVisible}
        onCancel={handleModalCancel}
        footer={[
          <Button key="back" onClick={handleModalCancel}>
            H·ªßy
          </Button>,
          <Button
            key="submit"
            type="primary"
            loading={loading}
            onClick={handleModalOk}
            style={{}}
          >
            X√°c nh·∫≠n
          </Button>,
        ]}
      >
        <Form
          form={formModalSLVaGia} // G√°n form instance v√†o form
          layout="vertical"
        >
          <Form.Item
            label="S·ªë l∆∞·ª£ng chung"
            name="commonQuantity"
            rules={[
              {
                required: true,
                message: "S·ªë l∆∞·ª£ng chung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
              },
              {
                type: "number",
                min: 0,
                message: "S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë d∆∞∆°ng!",
              },
            ]}
          >
            <InputNumber
              style={{ width: "100%" }}
              type="number"
              min={1}
              maxLength={6}              value={commonQuantity}
              onChange={(value) => setCommonQuantity(value)}
              suffix={<span>ƒê√¥i</span>}
            />
          </Form.Item>
          <Form.Item
            label="Gi√° chung"
            name="commonPrice"
            rules={[
              { required: true, message: "Gi√° chung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" },
              {
                type: "number",
                min: 0,
                max: 500000000, // Gi·ªõi h·∫°n gi√° tr·ªã t·ªëi ƒëa l√† 500 tri·ªáu
                message: "Gi√° ph·∫£i l√† s·ªë d∆∞∆°ng v√† nh·ªè h∆°n 500 tri·ªáu!",
              },
            ]}
          >
            <InputNumber
              style={{ width: "100%" }}
              type="number"
              min={1}
              maxLength={7}
              value={commonPrice}
              onChange={(value) => setCommonPrice(value)}
              suffix={<span>VNƒê</span>}
            />
          </Form.Item>

          <Form.Item
            label="C√¢n n·∫∑ng chung"
            name="commonWeight"
            rules={[
              {
                required: true,
                message: "C√¢n n·∫∑ng chung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
              },
              {
                type: "number",
                min: 0,
                max: 10, // Gi·ªõi h·∫°n gi√° tr·ªã t·ªëi ƒëa l√† 500 tri·ªáu
                message: "C√¢n n·∫∑ng ph·∫£i l√† s·ªë d∆∞∆°ng v√† nh·ªè h∆°n 10kg !",
              },
            ]}
          >
            <InputNumber
              style={{ width: "100%" }}
              type="number"
              min={1}
              maxLength={2}
              value={commonWeight}
              onChange={(value) => setCommonWeight(value)}
              suffix={<span>Kg</span>}
            />
          </Form.Item>
        </Form>
      </Modal>
      <ModalAddNew
        open={addTypeModalVisible}
        onCancel={() => setAddTypeModalVisible(false)}
        title={"Lo·∫°i gi√†y"}
        req={"typeName"}
        onCreate={handleCreateType}
      />
      <ModalAddNew
        open={addBrandModalVisible}
        onCancel={() => setAddBrandModalVisible(false)}
        title={"Th∆∞∆°ng hi·ªáu"}
        req={"brandName"}
        onCreate={handleCreateBrand}
      />
      <ModalAddNew
        open={addGenderModalVisible}
        onCancel={() => setAddGenderModalVisible(false)}
        title={"Gi·ªõi t√≠nh"}
        req={"genderName"}
        onCreate={handleCreateGenDer}
      />
      <ModalAddNew
        open={addMaterialModalVisible}
        onCancel={() => setAddMaterialModalVisible(false)}
        title={"Ch·∫•t li·ªáu"}
        req={"materialName"}
        onCreate={handleCreateMaterial}
      />
      <ModalAddNew
        open={addSoleModalVisible}
        onCancel={() => setAddSoleModalVisible(false)}
        title={"ƒê·∫ø gi√†y"}
        req={"soleName"}
        onCreate={handleCreateSole}
      />
      <ModalAddNew
        open={addColorModalVisible}
        onCancel={() => setAddColorModalVisible(false)}
        title={"M√†u s·∫Øc"}
        req={"colorName"}
        onCreate={handleCreateColor}
      />
      <ModalAddNewSize
        open={addSizeModalVisible}
        onCancel={() => setAddSizeModalVisible(false)}
        title={"K√≠ch c·ª°"}
        req={"sizeName"}
        onCreate={handleCreateSize}
      />
    </Row>
  );
};

export default ProductDetailDrawer;
